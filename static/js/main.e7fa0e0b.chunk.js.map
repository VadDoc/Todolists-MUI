{"version":3,"sources":["api/todolists-api.ts","reportWebVitals.ts","utils/error-utils.ts","features/Login/auth-reducer.ts","app/app-reducer.ts","features/TodolistsList/todolists-reducer.ts","features/TodolistsList/tasks-reducer.ts","components/AddItemForm/AddItemForm.tsx","components/EditableSpan/EditableSpan.tsx","features/TodolistsList/Todolist/Task/Task.tsx","features/TodolistsList/Todolist/Todolist.tsx","features/TodolistsList/TodolistsList.tsx","components/ErrorSnackbar/ErrorSnackbar.tsx","features/Login/Login.tsx","app/App.tsx","app/store.ts","index.tsx"],"names":["TaskStatuses","TaskPriorities","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","instance","axios","create","baseURL","withCredentials","headers","todolistsAPI","get","title","post","id","delete","put","todolistId","taskId","model","authAPI","data","handleServerAppError","dispatch","messages","length","setAppErrorAC","error","setAppStatusAC","status","handleServerNetworkError","message","slice","createSlice","name","initialState","isLoggedIn","reducers","setIsLoggedInAC","state","action","payload","value","authReducer","reducer","actions","isInitialized","setIsInitializedAC","appReducer","removeTodolistAC","index","findIndex","tl","splice","addTodolistAC","unshift","todolist","filter","entityStatus","changeTodolistTitleAC","changeTodolistFilterAC","changeTodolistEntityStatusAC","setTodolistsAC","todolists","map","todolistsReducer","removeTaskAC","tasks","t","addTaskAC","task","todoListId","updateTaskAC","setTasksAC","extraReducers","builder","addCase","forEach","tasksReducer","updateTaskTC","getState","a","find","console","warn","apiModel","deadline","description","priority","startDate","response","resultCode","isAxiosError","AddItemForm","React","memo","addItem","disabled","useState","setTitle","setError","addItemHandler","trim","className","TextField","variant","onChange","e","currentTarget","onKeyPress","charCode","label","helperText","IconButton","color","onClick","AddBox","EditableSpan","editMode","setEditMode","classes","root","autoFocus","onBlur","onDoubleClick","Task","props","changeTaskStatus","changeTaskTitle","removeTask","onClickHandler","useCallback","onChangeHandler","newIsDoneValue","checked","Completed","New","onTitleChangeHandler","newValue","join","Checkbox","Todolist","demo","changeFilter","useDispatch","useEffect","items","addTask","changeTodolistTitle","onAllClickHandler","onActiveClickHandler","onCompletedClickHandler","tasksForTodolist","removeTodolist","Delete","style","paddingTop","Button","text","TodolistsList","useSelector","auth","removeTaskTC","item","addTaskTC","changeStatus","newTitle","changeTodolistTitleTC","addTodolist","addTodolistTC","n","useNavigate","Grid","container","padding","spacing","allTodolistTasks","Paper","Alert","forwardRef","ref","elevation","ErrorSnackbar","app","handleClose","event","reason","Snackbar","open","autoHideDuration","onClose","severity","sx","width","Login","formik","useFormik","initialValues","email","password","rememberMe","validate","values","errors","test","onSubmit","res","catch","finally","resetForm","navigate","justifyContent","handleSubmit","FormControl","FormLabel","href","target","rel","FormGroup","margin","getFieldProps","touched","FormControlLabel","control","handleChange","type","App","AppBar","position","Toolbar","edge","aria-label","Typography","LinearProgress","Container","fixed","path","element","top","textAlign","CircularProgress","rootReducer","combineReducers","store","configureStore","middleware","getDefaultMiddleware","prepend","thunkMiddleware","window","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"6KAiFYA,EAOAC,E,iCC1EGC,G,OAZS,SAACC,GACnBA,GAAeA,aAAuBC,UACxC,8BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,Q,mEDNRQ,EAAWC,IAAMC,OAAO,CAC5BC,QAAS,gDACTC,iBAAiB,EACjBC,QAAS,CACP,UAAW,0CAKFC,EAAe,WAExB,OAAON,EAASO,IAAoB,eAF3BD,EAAe,SAIXE,GACb,OAAOR,EAASS,KAA6E,aAAc,CAACD,WALnGF,EAAe,SAOXI,GACb,OAAOV,EAASW,OAAT,qBAA4CD,KAR1CJ,EAAe,SAUXI,EAAYF,GACzB,OAAOR,EAASY,IAAT,qBAA2EF,GAAM,CAACF,WAXhFF,EAAe,SAajBO,GACP,OAAOb,EAASO,IAAT,qBAA6CM,EAA7C,YAdEP,EAAe,SAgBfO,EAAoBC,GAC7B,OAAOd,EAASW,OAAT,qBAA4CE,EAA5C,kBAAgEC,KAjB9DR,EAAe,SAmBfO,EAAoBL,GAC7B,OAAOR,EAASS,KAAT,qBAC0DI,EAD1D,UAC8E,CAACL,WArB7EF,EAAe,SAuBfO,EAAoBC,EAAgBC,GAC7C,OAAOf,EAASY,IAAT,qBAC0DC,EAD1D,kBAC8EC,GAAUC,IAItFC,EAAU,SACfC,GACJ,OAAOjB,EAASS,KAAT,aAC0DQ,IAHxDD,EAAU,WAMnB,OAAOhB,EAASO,IAAT,YANES,EAAU,WAUnB,OAAOhB,EAASW,OACmC,iB,SA6B3CtB,O,aAAAA,I,2BAAAA,I,yBAAAA,I,kBAAAA,M,cAOAC,O,aAAAA,I,mBAAAA,I,WAAAA,I,uBAAAA,I,kBAAAA,M,KEpFL,IAAM4B,EAAuB,SAAID,EAAuBE,GACvDF,EAAKG,SAASC,OACdF,EAASG,EAAc,CAACC,MAAON,EAAKG,SAAS,MAE7CD,EAASG,EAAc,CAACC,MAAO,yBAEnCJ,EAASK,EAAe,CAACC,OAAQ,aAGxBC,EAA2B,SAACH,EAA4BJ,GACjEA,EAASG,EAAc,CAACC,MAAOA,EAAMI,QAAUJ,EAAMI,QAAU,yBAC/DR,EAASK,EAAe,CAACC,OAAQ,a,QCJ/BG,EAAQC,YAAY,CACxBC,KAAM,OACNC,aANmB,CACnBC,YAAY,GAMZC,SAAU,CACRC,gBADQ,SACQC,EAAOC,GACrBD,EAAMH,WAAaI,EAAOC,QAAQC,UAK3BC,EAAcX,EAAMY,QACnBN,EAAmBN,EAAMa,QAAzBP,gBCTRN,EAAQC,YAAY,CACxBC,KAAM,MACNC,aARqC,CACrCN,OAAQ,OACRF,MAAO,KACPmB,eAAe,GAMfT,SAAU,CACRX,cADQ,SACMa,EAAOC,GACnBD,EAAMZ,MAAQa,EAAOC,QAAQd,OAE/BC,eAJQ,SAIOW,EAAOC,GACpBD,EAAMV,OAASW,EAAOC,QAAQZ,QAEhCkB,mBAPQ,SAOWR,EAAOC,GACxBD,EAAMO,cAAgBN,EAAOC,QAAQC,UAK9BM,EAAahB,EAAMY,Q,EACmCZ,EAAMa,QAA3DnB,E,EAAAA,cAAeE,E,EAAAA,eAAgBmB,E,EAAAA,mBCvBvCf,EAAQC,YAAY,CACxBC,KAAM,YACNC,aAJ8C,GAK9CE,SAAU,CACRY,iBADQ,SACSV,EAAOC,GACtB,IAAMU,EAAQX,EAAMY,WAAU,SAAAC,GAAE,OAAIA,EAAGtC,KAAO0B,EAAOC,QAAQ3B,MACzDoC,GAAS,GACXX,EAAMc,OAAOH,EAAO,IAGxBI,cAPQ,SAOMf,EAAOC,GACnBD,EAAMgB,QAAN,2BAAkBf,EAAOC,QAAQe,UAAjC,IAA2CC,OAAQ,MAAOC,aAAc,WAE1EC,sBAVQ,SAUcpB,EAAOC,GAC3B,IAAMU,EAAQX,EAAMY,WAAU,SAAAC,GAAE,OAAIA,EAAGtC,KAAO0B,EAAOC,QAAQ3B,MAC7DyB,EAAMW,GAAOtC,MAAQ4B,EAAOC,QAAQ7B,OAEtCgD,uBAdQ,SAcerB,EAAOC,GAC5B,IAAMU,EAAQX,EAAMY,WAAU,SAAAC,GAAE,OAAIA,EAAGtC,KAAO0B,EAAOC,QAAQ3B,MAC7DyB,EAAMW,GAAOO,OAASjB,EAAOC,QAAQgB,QAEvCI,6BAlBQ,SAkBqBtB,EAAOC,GAClC,IAAMU,EAAQX,EAAMY,WAAU,SAAAC,GAAE,OAAIA,EAAGtC,KAAO0B,EAAOC,QAAQ3B,MAC7DyB,EAAMW,GAAOQ,aAAelB,EAAOC,QAAQZ,QAE7CiC,eAtBQ,SAsBOvB,EAAOC,GACpB,OAAOA,EAAOC,QAAQsB,UAAUC,KAAI,SAAAZ,GAAE,kCAASA,GAAT,IAAaK,OAAQ,MAAOC,aAAc,gBAKzEO,EAAmBjC,EAAMY,Q,EAQlCZ,EAAMa,QANRI,E,EAAAA,iBACAK,E,EAAAA,cACAK,E,EAAAA,sBACAC,E,EAAAA,uBACAC,E,EAAAA,6BACAC,E,EAAAA,eClCI9B,EAAQC,YAAY,CACxBC,KAAM,QACNC,aAJmC,GAKnCE,SAAU,CACR6B,aADQ,SACK3B,EAAOC,GAClB,IAAM2B,EAAQ5B,EAAMC,EAAOC,QAAQxB,YAC7BiC,EAAQiB,EAAMhB,WAAU,SAAAiB,GAAC,OAAIA,EAAEtD,KAAO0B,EAAOC,QAAQvB,UACvDgC,GAAS,GACXiB,EAAMd,OAAOH,EAAO,IAGxBmB,UARQ,SAQE9B,EAAOC,GACfD,EAAMC,EAAOC,QAAQ6B,KAAKC,YAAYhB,QAAQf,EAAOC,QAAQ6B,OAE/DE,aAXQ,SAWKjC,EAAOC,GAClB,IAAM2B,EAAQ5B,EAAMC,EAAOC,QAAQxB,YAC7BiC,EAAQiB,EAAMhB,WAAU,SAAAiB,GAAC,OAAIA,EAAEtD,KAAO0B,EAAOC,QAAQvB,UACvDgC,GAAS,IACXiB,EAAMjB,GAAN,2BAAmBiB,EAAMjB,IAAWV,EAAOC,QAAQtB,SAGvDsD,WAlBQ,SAkBGlC,EAAOC,GAChBD,EAAMC,EAAOC,QAAQxB,YAAcuB,EAAOC,QAAQ0B,QAGtDO,cAAe,SAACC,GACdA,EAAQC,QAAQtB,GAAe,SAACf,EAAOC,GACrCD,EAAMC,EAAOC,QAAQe,SAAS1C,IAAM,MAEtC6D,EAAQC,QAAQ3B,GAAkB,SAACV,EAAOC,UACjCD,EAAMC,EAAOC,QAAQ3B,OAE9B6D,EAAQC,QAAQd,GAAgB,SAACvB,EAAOC,GACtCA,EAAOC,QAAQsB,UAAUc,SAAQ,SAACzB,GAChCb,EAAMa,EAAGtC,IAAM,YAMVgE,EAAe9C,EAAMY,Q,EACiCZ,EAAMa,QAA3DqB,E,EAAAA,aAAcG,G,EAAAA,UAAWG,G,EAAAA,aAAcC,G,EAAAA,WAgCxCM,GAAe,SAAC7D,EAAgBC,EAAkCF,GAAnD,8CAC1B,WAAOM,EAAoByD,GAA3B,uBAAAC,EAAA,yDACQ1C,EAAQyC,IACRV,EAAO/B,EAAM4B,MAAMlD,GAAYiE,MAAK,SAAAd,GAAC,OAAIA,EAAEtD,KAAOI,KAF1D,uBAKIiE,QAAQC,KAAK,+BALjB,iCASQC,EATR,aAUIC,SAAUhB,EAAKgB,SACfC,YAAajB,EAAKiB,YAClBC,SAAUlB,EAAKkB,SACfC,UAAWnB,EAAKmB,UAChB7E,MAAO0D,EAAK1D,MACZiB,OAAQyC,EAAKzC,QACVV,GAhBP,kBAoB2BT,EAAwBO,EAAYC,EAAQmE,GApBvE,OAqBqC,KAD3BK,EApBV,QAqBiBrE,KAAKsE,YACVnD,EAASgC,GAAa,CAACtD,SAAQC,QAAOF,eAC5CM,EAASiB,IAETlB,EAAqBoE,EAASrE,KAAME,GAzB1C,kDA4BQlB,IAAMuF,aAAN,OAA2B9D,EAAyB,EAAD,GAAQP,GA5BnE,0DAD0B,yD,mEC1EfsE,GAAcC,IAAMC,MAAK,YAA8D,IAAnDC,EAAkD,EAAlDA,QAAkD,IAAzCC,gBAAyC,WACvEC,mBAAS,IAD8D,oBAC1FtF,EAD0F,KACnFuF,EADmF,OAEvED,mBAAwB,MAF+C,oBAE1FvE,EAF0F,KAEnFyE,EAFmF,KAI3FC,EAAiB,WACA,KAAjBzF,EAAM0F,QACRN,EAAQpF,GACRuF,EAAS,KAETC,EAAS,sBAiBb,OACE,uBAAKG,UAAW,WAAhB,UACE,eAACC,GAAA,EAAD,CAAWC,QAAQ,WACRR,SAAUA,EACVtE,QAASA,EACTe,MAAO9B,EACP8F,SAnBS,SAACC,GACvBR,EAASQ,EAAEC,cAAclE,QAmBZmE,WAhBW,SAACF,GACX,OAAVhF,GACFyE,EAAS,MAEQ,KAAfO,EAAEG,UACJT,KAYWU,MAAM,QACNC,WAAYrF,IAEvB,eAACsF,GAAA,EAAD,CAAYC,MAAM,UAAUC,QAASd,EAAgBJ,SAAUA,EAA/D,SACE,eAACmB,GAAA,EAAD,Y,UCxCKC,GAAevB,IAAMC,MAAK,YAAqD,IAA1CrD,EAAyC,EAAzCA,MAAOgE,EAAkC,EAAlCA,SAAkC,EACvDR,oBAAS,GAD8C,oBAChFoB,EADgF,KACtEC,EADsE,OAE7DrB,mBAASxD,GAFoD,oBAEhF9B,EAFgF,KAEzEuF,EAFyE,KAgBvF,OAAOmB,EACD,eAACd,GAAA,EAAD,CAAWgB,QAAS,CAACC,KAAM,iBAAkBP,MAAO,UAAWxE,MAAO9B,EAAO8F,SAL/D,SAACC,GACjBR,EAASQ,EAAEC,cAAclE,QAI6EgF,WAAS,EAACC,OAT3F,WACrBJ,GAAY,GACZb,EAAS9F,MAQP,uBAAM2F,UAAW,QAASqB,cAdP,WACrBL,GAAY,GACZpB,EAASzD,IAYP,SAA4DA,O,mDCnBzDmF,GAAO/B,IAAMC,MAAK,SAAC+B,GAA0B,IACjDxD,EAAmEwD,EAAnExD,KAAMrD,EAA6D6G,EAA7D7G,WAAY8G,EAAiDD,EAAjDC,iBAAkBC,EAA+BF,EAA/BE,gBAAiBC,EAAcH,EAAdG,WAEtDC,EAAiBC,uBAAY,kBAAMF,EAAW3D,EAAKxD,GAAIG,KAAa,CAACqD,EAAKxD,GAAIG,EAAYgH,IAE1FG,EAAkBD,uBAAY,SAACxB,GACnC,IAAI0B,EAAiB1B,EAAEC,cAAc0B,QACrCP,EAAiBzD,EAAKxD,GAAIuH,EAAiB5I,EAAa8I,UAAY9I,EAAa+I,IAAKvH,KACrF,CAACqD,EAAKxD,GAAIG,EAAY8G,IAEnBU,EAAuBN,uBAAY,SAACO,GACxCV,EAAgB1D,EAAKxD,GAAI4H,EAAUzH,KAClC,CAACqD,EAAKxD,GAAIG,EAAY+G,IAEzB,OACE,uBAAmBzB,UAAW,CAACjC,EAAKzC,SAAWpC,EAAa8I,UAAY,UAAY,GAAI,QAAQI,KAAK,KAArG,UACE,eAACC,GAAA,EAAD,CACEN,QAAShE,EAAKzC,SAAWpC,EAAa8I,UACtCrB,MAAM,UACNR,SAAU0B,IAGZ,eAACf,GAAD,CAAc3E,MAAO4B,EAAK1D,MAAO8F,SAAU+B,IAC3C,eAACxB,GAAA,EAAD,CAAYE,QAASe,EAArB,SACE,eAAC,KAAD,QATM5D,EAAKxD,OCVN+H,GAAW/C,IAAMC,MAAK,YAAgD,IAAD,IAApC+C,YAAoC,SAAnBhB,EAAmB,yBAEzEtE,EAAgFsE,EAAhFtE,SAAUW,EAAsE2D,EAAtE3D,MAAO4E,EAA+DjB,EAA/DiB,aAAchB,EAAiDD,EAAjDC,iBAAkBC,EAA+BF,EAA/BE,gBAAiBC,EAAcH,EAAdG,WACnE1G,EAAWyH,cAEjBC,qBAAU,WJsCgB,IAAChI,EIrCrB6H,GAGJvH,GJkCyBN,EIlCHuC,EAAS1C,GJkCP,uCAAwB,WAAOS,GAAP,iBAAA0D,EAAA,6DAClD1D,EAASK,EAAe,CAACC,OAAQ,aADiB,SAE3BnB,EAAsBO,GAFK,OAE5CyE,EAF4C,OAG5CvB,EAAQuB,EAASrE,KAAK6H,MAC5B3H,EAASkD,GAAW,CAACN,QAAOlD,gBAC5BM,EAASK,EAAe,CAACC,OAAQ,eALiB,2CAAxB,0DIjCvB,CAAC2B,EAAS1C,GAAIgI,EAAMvH,IAEvB,IAAM4H,EAAUhB,uBAAY,SAACvH,GAC3BkH,EAAMqB,QAAQvI,EAAO4C,EAAS1C,MAC7B,CAACgH,EAAOtE,EAAS1C,KAKdsI,EAAsBjB,uBAAY,SAACvH,GACvCkH,EAAMsB,oBAAoB5F,EAAS1C,GAAIF,KACtC,CAAC4C,EAAS1C,GAAIgH,IAEXuB,EAAoBlB,uBAAY,kBAAMY,EAAa,MAAOvF,EAAS1C,MAAK,CAAC0C,EAAS1C,GAAIiI,IACtFO,EAAuBnB,uBAAY,kBAAMY,EAAa,SAAUvF,EAAS1C,MAAK,CAAC0C,EAAS1C,GAAIiI,IAC5FQ,EAA0BpB,uBAAY,kBAAMY,EAAa,YAAavF,EAAS1C,MAAK,CAAC0C,EAAS1C,GAAIiI,IAEpGS,EAAmBrF,EASvB,MAPwB,WAApBX,EAASC,SACX+F,EAAmBrF,EAAMV,QAAO,SAAAW,GAAC,OAAIA,EAAEvC,SAAWpC,EAAa+I,QAEzC,cAApBhF,EAASC,SACX+F,EAAmBrF,EAAMV,QAAO,SAAAW,GAAC,OAAIA,EAAEvC,SAAWpC,EAAa8I,cAI/D,iCACE,sBAAIhC,UAAW,iBAAf,UAAiC,eAACc,GAAD,CAAc3E,MAAOc,EAAS5C,MAAO8F,SAAU0C,IAC9E,eAACnC,GAAA,EAAD,CAAYE,QAvBK,WACrBW,EAAM2B,eAAejG,EAAS1C,KAsBWmF,SAAoC,YAA1BzC,EAASE,aAAxD,SACE,eAACgG,GAAA,EAAD,SAGJ,eAAC7D,GAAD,CAAaG,QAASmD,EAASlD,SAAoC,YAA1BzC,EAASE,eAClD,+BAEI8F,EAAiBxF,KAAI,SAAAI,GAAC,OAAI,eAACyD,GAAD,CAAiBvD,KAAMF,EAAGnD,WAAYuC,EAAS1C,GACzCmH,WAAYA,EACZD,gBAAiBA,EACjBD,iBAAkBA,GAHb3D,EAAEtD,SAO3C,uBAAK6I,MAAO,CAACC,WAAY,QAAzB,UACE,eAACC,GAAA,EAAD,CAAQpD,QAA6B,QAApBjD,EAASC,OAAmB,WAAa,OAClD0D,QAASkC,EACT7B,QAAS,CAACC,KAAM,eAAgBqC,KAAM,oBAF9C,iBAMA,eAACD,GAAA,EAAD,CAAQpD,QAA6B,WAApBjD,EAASC,OAAsB,WAAa,OACrD0D,QAASmC,EACT9B,QAAS,CAACC,KAAM,eAAgBqC,KAAM,oBAF9C,oBAMA,eAACD,GAAA,EAAD,CAAQpD,QAA6B,cAApBjD,EAASC,OAAyB,WAAa,OACxD0D,QAASoC,EACT/B,QAAS,CAACC,KAAM,eAAgBqC,KAAM,oBAF9C,gC,SC1DKC,GAAqC,SAAC,GAAoB,IAAD,IAAlBjB,YAAkB,SAC9D/E,EAAYiG,aAAyD,SAAAzH,GAAK,OAAIA,EAAMwB,aACpFI,EAAQ6F,aAA8C,SAAAzH,GAAK,OAAIA,EAAM4B,SACrE/B,EAAa4H,aAAuC,SAAAzH,GAAK,OAAIA,EAAM0H,KAAK7H,cAExEb,EAAWyH,cAEjBC,qBAAU,YACJH,GAAS1G,GAGbb,ENkB4B,uCAAM,WAAOA,GAAP,eAAA0D,EAAA,6DACpC1D,EAASK,EAAe,CAACC,OAAQ,aADG,SAEbnB,IAFa,OAE9BgF,EAF8B,OAGpCnE,EAASuC,EAAe,CAACC,UAAW2B,EAASrE,QAC7CE,EAASK,EAAe,CAACC,OAAQ,eAJG,2CAAN,yDMjB3B,CAACiH,EAAM1G,EAAYb,IAEtB,IAAM0G,EAAaE,uBAAY,SAAUrH,EAAYG,GACnDM,EL4BwB,SAACL,EAAgBD,GAAjB,8CAAwC,WAAOM,GAAP,SAAA0D,EAAA,sEAC5DvE,EAAwBO,EAAYC,GADwB,OAElEK,EAAS2C,EAAa,CAAChD,SAAQD,gBAFmC,2CAAxC,sDK5BfiJ,CAAapJ,EAAIG,MACzB,CAACM,IAEE4H,EAAUhB,uBAAY,SAAUvH,EAAeK,GACnDM,EL6BqB,SAACX,EAAeK,GAAhB,8CAAuC,WAAOM,GAAP,iBAAA0D,EAAA,6DAC9D1D,EAASK,EAAe,CAACC,OAAQ,aAD6B,kBAGrCnB,EAAwBO,EAAYL,GAHC,OAI3B,KAD3B8E,EAHsD,QAI/CrE,KAAKsE,YACVrB,EAAOoB,EAASrE,KAAKA,KAAK8I,KAChC5I,EAAS8C,GAAU,CAACC,UACpB/C,EAASK,EAAe,CAACC,OAAQ,gBAEjCP,EAAqBoE,EAASrE,KAAME,GATsB,gDAYxDlB,IAAMuF,aAAN,OAA2B9D,EAAyB,EAAD,GAAQP,GAZH,yDAAvC,sDK7BZ6I,CAAUxJ,EAAOK,MACzB,CAACM,IAEE8I,EAAelC,uBAAY,SAAUrH,EAAYe,EAAsBZ,GAC3EM,EAASwD,GAAajE,EAAI,CAACe,UAASZ,MACnC,CAACM,IAEEyG,EAAkBG,uBAAY,SAAUrH,EAAYwJ,EAAkBrJ,GAC1EM,EAASwD,GAAajE,EAAI,CAACF,MAAO0J,GAAWrJ,MAC5C,CAACM,IAEEwH,EAAeZ,uBAAY,SAAUzF,EAAyBzB,GAClEM,EAASqC,EAAuB,CAAC9C,GAAIG,EAAYwC,OAAQf,OACxD,CAACnB,IAEEkI,EAAiBtB,uBAAY,SAAUrH,GNEf,IAACG,EMD7BM,GNC6BN,EMDHH,ENCE,uCAAwB,WAAOS,GAAP,SAAA0D,EAAA,6DACtD1D,EAASK,EAAe,CAACC,OAAQ,aACjCN,EAASsC,EAA6B,CAAC/C,GAAIG,EAAYY,OAAQ,aAFT,SAGhDnB,EAA4BO,GAHoB,OAItDM,EAAS0B,EAAiB,CAACnC,GAAIG,KAC/BM,EAASK,EAAe,CAACC,OAAQ,eALqB,2CAAxB,0DMA3B,CAACN,IAEE6H,EAAsBjB,uBAAY,SAAUrH,EAAYF,GAC5DW,ENYiC,SAACT,EAAYF,GAAb,8CAA+B,WAAOW,GAAP,SAAA0D,EAAA,sEAC5DvE,EAA4BI,EAAIF,GAD4B,OAElEW,EAASoC,EAAsB,CAAC7C,GAAIA,EAAIF,MAAOA,KAFmB,2CAA/B,sDMZxB2J,CAAsBzJ,EAAIF,MAClC,CAACW,IAEEiJ,EAAcrC,uBAAY,SAACvH,GAC/BW,ENCyB,SAACX,GAAD,8CAAmB,WAAOW,GAAP,eAAA0D,EAAA,6DAC9C1D,EAASK,EAAe,CAACC,OAAQ,aADa,SAEvBnB,EAA4BE,GAFL,OAExC8E,EAFwC,OAG9CnE,EAAS+B,EAAc,CAACE,SAAUkC,EAASrE,KAAKA,KAAK8I,QACrD5I,EAASK,EAAe,CAACC,OAAQ,eAJa,2CAAnB,sDMDhB4I,CAAc7J,MACtB,CAACW,IAEEmJ,EAAIC,eAGV,OAFKvI,GAAYsI,EAAE,UAEZ,uCACL,eAACE,GAAA,EAAD,CAAMC,WAAS,EAAClB,MAAO,CAACmB,QAAS,QAAjC,SACE,eAACjF,GAAD,CAAaG,QAASwE,MAExB,eAACI,GAAA,EAAD,CAAMC,WAAS,EAACE,QAAS,EAAzB,SAEIhH,EAAUC,KAAI,SAAAZ,GACZ,IAAI4H,EAAmB7G,EAAMf,EAAGtC,IAEhC,OAAO,eAAC8J,GAAA,EAAD,CAAMT,MAAI,EAAV,SACL,eAACc,GAAA,EAAD,CAAOtB,MAAO,CAACmB,QAAS,QAAxB,SACE,eAACjC,GAAD,CACErF,SAAUJ,EACVe,MAAO6G,EACP/C,WAAYA,EACZc,aAAcA,EACdI,QAASA,EACTpB,iBAAkBsC,EAClBZ,eAAgBA,EAChBzB,gBAAiBA,EACjBoB,oBAAqBA,EACrBN,KAAMA,OAZW1F,EAAGtC,a,2FCvE9BoK,GAAQpF,IAAMqF,YAAuC,SACvDrD,EAAOsD,GACP,OAAO,eAAC,KAAD,aAAUC,UAAW,EAAGD,IAAKA,EAAK3E,QAAQ,UAAaqB,OAI3D,SAASwD,KACZ,IAAM3J,EAAQqI,aAA6C,SAAAzH,GAAK,OAAIA,EAAMgJ,IAAI5J,SACxEJ,EAAWyH,cAEXwC,EAAc,SAACC,EAA8BC,GAChC,cAAXA,GAGJnK,EAASG,EAAc,CAACC,MAAO,SAGnC,OACI,eAACgK,GAAA,EAAD,CAAUC,KAAgB,OAAVjK,EAAgBkK,iBAAkB,IAAMC,QAASN,EAAjE,SACI,eAAC,GAAD,CAAOM,QAASN,EAAaO,SAAS,QAAQC,GAAI,CAACC,MAAO,QAA1D,SACKtK,M,sDCPJuK,GAAQ,WAOnB,IAAM3K,EAAWyH,cAEXmD,EAASC,aAAU,CACvBC,cAAe,CACbC,MAAO,GACPC,SAAU,GACVC,YAAY,GAEdC,SAAU,SAACC,GACT,IAAMC,EAA0B,GAWhC,OAVKD,EAAOJ,MAEA,4CAA4CM,KAAKF,EAAOJ,SAClEK,EAAOL,MAAQ,yBAFfK,EAAOL,MAAQ,WAIZI,EAAOH,SAEDG,EAAOH,SAAS9K,OAAS,IAClCkL,EAAOJ,SAAW,+CAFlBI,EAAOJ,SAAW,WAIbI,GAETE,SAAU,SAAAH,GVxBS,IAACrL,EUyBlBE,GVzBkBF,EUyBDqL,EVzBe,SAACnL,GACrCA,EAASK,EAAe,CAACC,OAAQ,aACjCT,EAAcC,GACXvB,MAAK,SAAAgN,GACwB,IAAxBA,EAAIzL,KAAKsE,YACXpE,EAASe,EAAgB,CAACI,OAAO,KACjCnB,EAASK,EAAe,CAACC,OAAQ,gBAEjCP,EAAqBwL,EAAIzL,KAAME,MAGlCwL,OAAM,SAACpL,GACNG,EAAyBH,EAAOJ,MAEjCyL,SAAQ,kBAAMzL,EAASK,EAAe,CAACC,OAAQ,gBUY9CsK,EAAOc,eAIL7K,EAAa4H,aAAY,SAACzH,GAAD,OAA6BA,EAAM0H,KAAK7H,cACjE8K,EAAWvC,eAIjB,OAFGvI,GAAY8K,EAAS,KAEjB,eAACtC,GAAA,EAAD,CAAMC,WAAS,EAACsC,eAAgB,SAAhC,SACL,eAACvC,GAAA,EAAD,CAAMT,MAAI,EAACgD,eAAgB,SAA3B,SACE,uBAAMN,SAAUV,EAAOiB,aAAvB,SACE,gBAACC,GAAA,EAAD,WACE,gBAACC,GAAA,EAAD,WACE,0DACE,oBAAGC,KAAM,wCACNC,OAAQ,SAAUC,IAAI,aADzB,sBAIF,yEACA,2DACA,mDAEF,gBAACC,GAAA,EAAD,WACE,eAAClH,GAAA,EAAD,yBACEO,MAAM,QACN4G,OAAO,UACHxB,EAAOyB,cAAc,UAH3B,IAIEjM,QAASwK,EAAOQ,OAAOL,OAASH,EAAO0B,QAAQvB,MAC/CtF,WAAYmF,EAAO0B,QAAQvB,MAAQH,EAAOQ,OAAOL,MAAQ,MAE3D,eAAC9F,GAAA,EAAD,yBACEO,MAAM,WACN4G,OAAO,UACHxB,EAAOyB,cAAc,aAH3B,IAIEjM,QAASwK,EAAOQ,OAAOJ,UAAYJ,EAAO0B,QAAQtB,SAClDvF,WAAYmF,EAAO0B,QAAQtB,SAAWJ,EAAOQ,OAAOJ,SAAW,MAEjE,eAACuB,GAAA,EAAD,CACE/G,MAAO,cACPgH,QACE,eAACnF,GAAA,EAAD,CACE1G,KAAM,aACNwE,SAAUyF,EAAO6B,aACjB1F,QAAS6D,EAAOO,OAAOF,eAI7B,eAAC3C,GAAA,EAAD,CAAQoE,KAAM,SAAUxH,QAAS,YAAaS,MAAO,UAArD,gC,UC3BGgH,OAhDf,YAAyC,IAAD,IAA1BpF,YAA0B,SAChCjH,EAASmI,aAAiD,SAACzH,GAAD,OAAWA,EAAMgJ,IAAI1J,UAC/EiB,EAAgBkH,aAAuC,SAACzH,GAAD,OAAWA,EAAMgJ,IAAIzI,iBAC5EV,EAAa4H,aAAuC,SAACzH,GAAD,OAAWA,EAAM0H,KAAK7H,cAE1Eb,EAAWyH,cAMjB,OAJAC,qBAAU,WACR1H,EVA2B,uCAAM,WAAOA,GAAP,eAAA0D,EAAA,6DACnC1D,EAASK,EAAe,CAACC,OAAQ,aADE,kBAGVT,IAHU,OAIA,KAD3BsE,EAH2B,QAIpBrE,KAAKsE,WAChBpE,EAASe,EAAgB,CAACI,OAAO,KAEjCpB,EAAqBoE,EAASrE,KAAME,GAPL,gDAU7BlB,IAAMuF,aAAN,OACF9D,EAAyB,EAAD,GAAQP,GAXD,yBAcjCA,EAASwB,EAAmB,CAACL,OAAO,KAdH,4EAAN,yDUC1B,CAACnB,IAECuB,EAYH,uBAAKyD,UAAU,MAAf,UACE,eAAC+E,GAAD,IACA,gBAAC6C,GAAA,EAAD,CAAQC,SAAS,SAAjB,UACE,gBAACC,GAAA,EAAD,WACE,eAACpH,GAAA,EAAD,CAAYqH,KAAK,QAAQpH,MAAM,UAAUqH,aAAW,WAApD,SACE,eAAC,KAAD,MAEF,eAACC,GAAA,EAAD,CAAY/H,QAAQ,KAApB,6BAGCrE,GAAc,eAACyH,GAAA,EAAD,CAAQ1C,QAfd,WACf5F,EXDoB,uCAAM,WAAOA,GAAP,eAAA0D,EAAA,6DAC5B1D,EAASK,EAAe,CAACC,OAAQ,aADL,kBAGHT,IAHG,OAIO,KAD3BsE,EAHoB,QAIbrE,KAAKsE,YAChBpE,EAASe,EAAgB,CAACI,OAAO,KACjCnB,EAASK,EAAe,CAACC,OAAQ,gBAEjCP,EAAqBoE,EAASrE,KAAME,GARZ,gDAWtBlB,IAAMuF,aAAN,OAA2B9D,EAAyB,EAAD,GAAQP,GAXrC,yDAAN,wDWe4B2F,MAAO,UAAlC,wBAEL,YAAXrF,GAAwB,eAAC4M,GAAA,EAAD,CAAgBvH,MAAO,eAElD,eAACwH,GAAA,EAAD,CAAWC,OAAK,EAAhB,SACE,gBAAC,KAAD,WACE,eAAC,KAAD,CAAOC,KAAM,IAAKC,QAAS,eAAC,GAAD,CAAe/F,KAAMA,MAChD,eAAC,KAAD,CAAO8F,KAAM,SAAUC,QAAS,eAAC,GAAD,MAChC,eAAC,KAAD,CAAOD,KAAM,KAAMC,QAAS,iDA7B3B,sBACLlF,MAAO,CAACyE,SAAU,QAASU,IAAK,MAAOC,UAAW,SAAU9C,MAAO,QAD9D,SAEL,eAAC+C,GAAA,EAAD,O,oBC9BAC,GAAcC,aAAgB,CAClC/K,MAAOW,EACPf,UAAWE,EACXsH,IAAKvI,EACLiH,KAAMtH,IAIKwM,GAAQC,YAAe,CAClCxM,QAASqM,GACTI,WAAY,SAACC,GAAD,OAA0BA,IACnCC,QAAQC,SAKbC,OAAON,MAAQA,G,aCffO,IAASC,OACL,eAAC,IAAMC,WAAP,UACE,eAAC,KAAD,UACE,eAAC,IAAD,CAAUT,MAAOA,GAAjB,SACI,eAAC,GAAD,UAIRU,SAASC,eAAe,SAM5BnQ,M","file":"static/js/main.e7fa0e0b.chunk.js","sourcesContent":["import axios, {AxiosResponse} from 'axios'\r\nimport {LoginParamsType} from \"../features/Login/Login\";\r\n\r\nconst instance = axios.create({\r\n  baseURL: 'https://social-network.samuraijs.com/api/1.1/',\r\n  withCredentials: true,\r\n  headers: {\r\n    'API-KEY': 'b1080483-6498-445e-9780-91e9c47f08f9'\r\n  }\r\n})\r\n\r\n// api\r\nexport const todolistsAPI = {\r\n  getTodolists() {\r\n    return instance.get<TodolistType[]>('todo-lists');\r\n  },\r\n  createTodolist(title: string) {\r\n    return instance.post<{ title: string }, AxiosResponse<ResponseType<{ item: TodolistType }>>>('todo-lists', {title});\r\n  },\r\n  deleteTodolist(id: string) {\r\n    return instance.delete<ResponseType>(`todo-lists/${id}`);\r\n  },\r\n  updateTodolist(id: string, title: string) {\r\n    return instance.put<{ title: string }, AxiosResponse<ResponseType>>(`todo-lists/${id}`, {title});\r\n  },\r\n  getTasks(todolistId: string) {\r\n    return instance.get<GetTasksResponse>(`todo-lists/${todolistId}/tasks`);\r\n  },\r\n  deleteTask(todolistId: string, taskId: string) {\r\n    return instance.delete<ResponseType>(`todo-lists/${todolistId}/tasks/${taskId}`);\r\n  },\r\n  createTask(todolistId: string, title: string) {\r\n    return instance.post<{ title: string },\r\n      AxiosResponse<ResponseType<{ item: TaskType }>>>(`todo-lists/${todolistId}/tasks`, {title});\r\n  },\r\n  updateTask(todolistId: string, taskId: string, model: UpdateTaskModelType) {\r\n    return instance.put<UpdateTaskModelType,\r\n      AxiosResponse<ResponseType<{ item: TaskType }>>>(`todo-lists/${todolistId}/tasks/${taskId}`, model);\r\n  }\r\n}\r\n\r\nexport const authAPI = {\r\n  login(data: LoginParamsType) {\r\n    return instance.post<LoginParamsType,\r\n      AxiosResponse<ResponseType<{ userId: number }>>>(`auth/login`, data)\r\n  },\r\n  me() {\r\n    return instance.get<AuthResponseType,\r\n      AxiosResponse<ResponseType<AuthMeType>>>(`auth/me`)\r\n  },\r\n  logout() {\r\n    return instance.delete<AuthResponseType,\r\n      AxiosResponse<ResponseType<{ userId: number }>>>('/auth/login')\r\n  }\r\n}\r\n\r\n// types\r\ntype AuthMeType = {\r\n  resultCode: number\r\n  messages: string[]\r\n  data: {\r\n    id: number\r\n    email: string\r\n    login: string\r\n  }\r\n}\r\n\r\nexport type TodolistType = {\r\n  id: string\r\n  title: string\r\n  addedDate: string\r\n  order: number\r\n}\r\n\r\nexport type ResponseType<D = {}> = {\r\n  resultCode: number\r\n  messages: Array<string>\r\n  fieldsErrors: Array<string>\r\n  data: D\r\n}\r\n\r\nexport enum TaskStatuses {\r\n  New = 0,\r\n  InProgress = 1,\r\n  Completed = 2,\r\n  Draft = 3\r\n}\r\n\r\nexport enum TaskPriorities {\r\n  Low = 0,\r\n  Middle = 1,\r\n  Hi = 2,\r\n  Urgently = 3,\r\n  Later = 4\r\n}\r\n\r\nexport type TaskType = {\r\n  description: string\r\n  title: string\r\n  status: TaskStatuses\r\n  priority: TaskPriorities\r\n  startDate: string\r\n  deadline: string\r\n  id: string\r\n  todoListId: string\r\n  order: number\r\n  addedDate: string\r\n}\r\n\r\nexport type UpdateTaskModelType = {\r\n  title: string\r\n  description: string\r\n  status: TaskStatuses\r\n  priority: TaskPriorities\r\n  startDate: string\r\n  deadline: string\r\n}\r\n\r\ntype GetTasksResponse = {\r\n  error: string | null\r\n  totalCount: number\r\n  items: TaskType[]\r\n}\r\n\r\ntype AuthResponseType = {\r\n  resultCode: number\r\n  messages: Array<string>\r\n  data: {\r\n    id: number\r\n    email: string\r\n    login: string\r\n  }\r\n}\r\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import {setAppErrorAC, SetAppErrorActionType, setAppStatusAC, SetAppStatusActionType} from '../app/app-reducer'\r\nimport {ResponseType} from '../api/todolists-api'\r\nimport {Dispatch} from 'redux'\r\n\r\nexport const handleServerAppError = <D>(data: ResponseType<D>, dispatch: Dispatch<SetAppErrorActionType | SetAppStatusActionType>) => {\r\n    if (data.messages.length) {\r\n        dispatch(setAppErrorAC({error: data.messages[0]}))\r\n    } else {\r\n        dispatch(setAppErrorAC({error: 'Some error occurred'}))\r\n    }\r\n    dispatch(setAppStatusAC({status: 'failed'}))\r\n}\r\n\r\nexport const handleServerNetworkError = (error: { message: string }, dispatch: Dispatch<SetAppErrorActionType | SetAppStatusActionType>) => {\r\n    dispatch(setAppErrorAC({error: error.message ? error.message : 'Some error occurred'}))\r\n    dispatch(setAppStatusAC({status: 'failed'}))\r\n}\r\n","import {Dispatch} from 'redux'\nimport {setAppStatusAC} from '../../app/app-reducer'\nimport {authAPI} from \"../../api/todolists-api\";\nimport {handleServerAppError, handleServerNetworkError} from \"../../utils/error-utils\";\nimport axios from \"axios\";\nimport {createSlice, PayloadAction} from \"@reduxjs/toolkit\";\n\nconst initialState = {\n  isLoggedIn: false\n}\n\nconst slice = createSlice({\n  name: 'auth',\n  initialState: initialState,\n  reducers: {\n    setIsLoggedInAC(state, action: PayloadAction<{ value: boolean }>) {\n      state.isLoggedIn = action.payload.value\n    }\n  }\n})\n\nexport const authReducer = slice.reducer\nexport const {setIsLoggedInAC} = slice.actions\n\n// thunks\nexport const loginTC = (data: any) => (dispatch: Dispatch) => {\n  dispatch(setAppStatusAC({status: 'loading'}))\n  authAPI.login(data)\n    .then(res => {\n      if (res.data.resultCode === 0) {\n        dispatch(setIsLoggedInAC({value: true}))\n        dispatch(setAppStatusAC({status: 'succeeded'}))\n      } else {\n        handleServerAppError(res.data, dispatch);\n      }\n    })\n    .catch((error) => {\n      handleServerNetworkError(error, dispatch)\n    })\n    .finally(() => dispatch(setAppStatusAC({status: 'idle'})))\n}\n\nexport const logoutTC = () => async (dispatch: Dispatch) => {\n  dispatch(setAppStatusAC({status: 'loading'}))\n  try {\n    const response = await authAPI.logout()\n    if (response.data.resultCode === 0) {\n      dispatch(setIsLoggedInAC({value: false}))\n      dispatch(setAppStatusAC({status: 'succeeded'}))\n    } else {\n      handleServerAppError(response.data, dispatch)\n    }\n  } catch (error) {\n    if (axios.isAxiosError(error)) handleServerNetworkError(error, dispatch)\n  }\n}\n\n\n","import {authAPI} from \"../api/todolists-api\";\r\nimport {Dispatch} from 'redux'\r\nimport {setIsLoggedInAC} from \"../features/Login/auth-reducer\";\r\nimport {handleServerAppError, handleServerNetworkError} from \"../utils/error-utils\";\r\nimport axios from \"axios\";\r\nimport {createSlice, PayloadAction} from \"@reduxjs/toolkit\";\r\n\r\nconst initialState: InitialStateType = {\r\n  status: 'idle',\r\n  error: null,\r\n  isInitialized: false\r\n}\r\n\r\nconst slice = createSlice({\r\n  name: 'app',\r\n  initialState: initialState,\r\n  reducers: {\r\n    setAppErrorAC(state, action: PayloadAction<{ error: string | null }>) {\r\n      state.error = action.payload.error\r\n    },\r\n    setAppStatusAC(state, action: PayloadAction<{ status: RequestStatusType }>) {\r\n      state.status = action.payload.status\r\n    },\r\n    setIsInitializedAC(state, action: PayloadAction<{ value: boolean }>) {\r\n      state.isInitialized = action.payload.value\r\n    }\r\n  }\r\n})\r\n\r\nexport const appReducer = slice.reducer\r\nexport const {setAppErrorAC, setAppStatusAC, setIsInitializedAC} = slice.actions //деструктуирующее присваивание\r\n\r\nexport const initializeAppTC = () => async (dispatch: Dispatch) => {\r\n  dispatch(setAppStatusAC({status: 'loading'}))\r\n  try {\r\n    const response = await authAPI.me()\r\n    if (response.data.resultCode === 0) {\r\n      dispatch(setIsLoggedInAC({value: true}));\r\n    } else {\r\n      handleServerAppError(response.data, dispatch);\r\n    }\r\n  } catch (error) {\r\n    if (axios.isAxiosError(error)) {\r\n      handleServerNetworkError(error, dispatch)\r\n    }\r\n  } finally {\r\n    dispatch(setIsInitializedAC({value: true}))\r\n  }\r\n}\r\n\r\nexport type RequestStatusType = 'idle' | 'loading' | 'succeeded' | 'failed'\r\nexport type InitialStateType = {\r\n  status: RequestStatusType\r\n  error: string | null\r\n  isInitialized: boolean\r\n}\r\n\r\nexport type SetAppErrorActionType = ReturnType<typeof setAppErrorAC>\r\nexport type SetAppStatusActionType = ReturnType<typeof setAppStatusAC>\r\n","import {todolistsAPI, TodolistType} from '../../api/todolists-api'\r\nimport {Dispatch} from 'redux'\r\nimport {RequestStatusType, setAppStatusAC} from '../../app/app-reducer'\r\nimport {createSlice, PayloadAction} from \"@reduxjs/toolkit\";\r\n\r\nconst initialState: Array<TodolistDomainType> = []\r\n\r\nconst slice = createSlice({\r\n  name: 'todolists',\r\n  initialState: initialState,\r\n  reducers: {\r\n    removeTodolistAC(state, action: PayloadAction<{ id: string }>) {\r\n      const index = state.findIndex(tl => tl.id === action.payload.id)\r\n      if (index > -1) {\r\n        state.splice(index, 1)\r\n      }\r\n    },\r\n    addTodolistAC(state, action: PayloadAction<{ todolist: TodolistType }>) {\r\n      state.unshift({...action.payload.todolist, filter: 'all', entityStatus: 'idle'})\r\n    },\r\n    changeTodolistTitleAC(state, action: PayloadAction<{ id: string, title: string }>) {\r\n      const index = state.findIndex(tl => tl.id === action.payload.id)\r\n      state[index].title = action.payload.title\r\n    },\r\n    changeTodolistFilterAC(state, action: PayloadAction<{ id: string, filter: FilterValuesType }>) {\r\n      const index = state.findIndex(tl => tl.id === action.payload.id)\r\n      state[index].filter = action.payload.filter\r\n    },\r\n    changeTodolistEntityStatusAC(state, action: PayloadAction<{ id: string, status: RequestStatusType }>) {\r\n      const index = state.findIndex(tl => tl.id === action.payload.id)\r\n      state[index].entityStatus = action.payload.status\r\n    },\r\n    setTodolistsAC(state, action: PayloadAction<{ todolists: Array<TodolistType> }>) {\r\n      return action.payload.todolists.map(tl => ({...tl, filter: 'all', entityStatus: 'idle'}))\r\n    },\r\n  }\r\n})\r\n\r\nexport const todolistsReducer = slice.reducer\r\nexport const {\r\n  removeTodolistAC,\r\n  addTodolistAC,\r\n  changeTodolistTitleAC,\r\n  changeTodolistFilterAC,\r\n  changeTodolistEntityStatusAC,\r\n  setTodolistsAC\r\n} = slice.actions\r\n\r\n// thunks\r\nexport const fetchTodolistsTC = () => async (dispatch: Dispatch) => {\r\n  dispatch(setAppStatusAC({status: 'loading'}))\r\n  const response = await todolistsAPI.getTodolists()\r\n  dispatch(setTodolistsAC({todolists: response.data}))\r\n  dispatch(setAppStatusAC({status: 'succeeded'}))\r\n}\r\n\r\nexport const removeTodolistTC = (todolistId: string) => async (dispatch: Dispatch) => {\r\n  dispatch(setAppStatusAC({status: 'loading'}))\r\n  dispatch(changeTodolistEntityStatusAC({id: todolistId, status: 'loading'}))\r\n  await todolistsAPI.deleteTodolist(todolistId)\r\n  dispatch(removeTodolistAC({id: todolistId}))\r\n  dispatch(setAppStatusAC({status: 'succeeded'}))\r\n}\r\n\r\nexport const addTodolistTC = (title: string) => async (dispatch: Dispatch) => {\r\n  dispatch(setAppStatusAC({status: 'loading'}))\r\n  const response = await todolistsAPI.createTodolist(title)\r\n  dispatch(addTodolistAC({todolist: response.data.data.item}))\r\n  dispatch(setAppStatusAC({status: 'succeeded'}))\r\n}\r\n\r\nexport const changeTodolistTitleTC = (id: string, title: string) => async (dispatch: Dispatch) => {\r\n  await todolistsAPI.updateTodolist(id, title)\r\n  dispatch(changeTodolistTitleAC({id: id, title: title}))\r\n}\r\n\r\n//types\r\nexport type FilterValuesType = 'all' | 'active' | 'completed';\r\nexport type TodolistDomainType = TodolistType & {\r\n  filter: FilterValuesType\r\n  entityStatus: RequestStatusType\r\n}\r\n","import {addTodolistAC, removeTodolistAC, setTodolistsAC} from './todolists-reducer'\r\nimport {TaskPriorities, TaskStatuses, TaskType, todolistsAPI, UpdateTaskModelType} from '../../api/todolists-api'\r\nimport {Dispatch} from 'redux'\r\nimport {AppRootStateType} from '../../app/store'\r\nimport {setAppStatusAC} from '../../app/app-reducer'\r\nimport {handleServerAppError, handleServerNetworkError} from '../../utils/error-utils'\r\nimport axios from \"axios\";\r\nimport {createSlice, PayloadAction} from \"@reduxjs/toolkit\";\r\n\r\nconst initialState: TasksStateType = {}\r\n\r\nconst slice = createSlice({\r\n  name: 'tasks',\r\n  initialState: initialState,\r\n  reducers: {\r\n    removeTaskAC(state, action: PayloadAction<{ taskId: string, todolistId: string }>) {\r\n      const tasks = state[action.payload.todolistId]\r\n      const index = tasks.findIndex(t => t.id === action.payload.taskId)\r\n      if (index > -1) {\r\n        tasks.splice(index, 1)\r\n      }\r\n    },\r\n    addTaskAC(state, action: PayloadAction<{ task: TaskType }>) {\r\n      state[action.payload.task.todoListId].unshift(action.payload.task)\r\n    },\r\n    updateTaskAC(state, action: PayloadAction<{ taskId: string, model: UpdateDomainTaskModelType, todolistId: string }>) {\r\n      const tasks = state[action.payload.todolistId]\r\n      const index = tasks.findIndex(t => t.id === action.payload.taskId)\r\n      if (index > -1) {\r\n        tasks[index] = {...tasks[index], ...action.payload.model}\r\n      }\r\n    },\r\n    setTasksAC(state, action: PayloadAction<{ tasks: Array<TaskType>, todolistId: string }>) {\r\n      state[action.payload.todolistId] = action.payload.tasks\r\n    }\r\n  },\r\n  extraReducers: (builder) => {\r\n    builder.addCase(addTodolistAC, (state, action) => {\r\n      state[action.payload.todolist.id] = []\r\n    })\r\n    builder.addCase(removeTodolistAC, (state, action) => {\r\n      delete state[action.payload.id]\r\n    })\r\n    builder.addCase(setTodolistsAC, (state, action) => {\r\n      action.payload.todolists.forEach((tl: any) => {\r\n        state[tl.id] = []\r\n      })\r\n    })\r\n  }\r\n})\r\n\r\nexport const tasksReducer = slice.reducer\r\nexport const {removeTaskAC, addTaskAC, updateTaskAC, setTasksAC} = slice.actions\r\n\r\n// thunks\r\nexport const fetchTasksTC = (todolistId: string) => async (dispatch: Dispatch) => {\r\n  dispatch(setAppStatusAC({status: 'loading'}))\r\n  const response = await todolistsAPI.getTasks(todolistId)\r\n  const tasks = response.data.items\r\n  dispatch(setTasksAC({tasks, todolistId}))\r\n  dispatch(setAppStatusAC({status: 'succeeded'}))\r\n}\r\n\r\nexport const removeTaskTC = (taskId: string, todolistId: string) => async (dispatch: Dispatch) => {\r\n  await todolistsAPI.deleteTask(todolistId, taskId)\r\n  dispatch(removeTaskAC({taskId, todolistId}))\r\n}\r\n\r\nexport const addTaskTC = (title: string, todolistId: string) => async (dispatch: Dispatch) => {\r\n  dispatch(setAppStatusAC({status: 'loading'}))\r\n  try {\r\n    const response = await todolistsAPI.createTask(todolistId, title)\r\n    if (response.data.resultCode === 0) {\r\n      const task = response.data.data.item\r\n      dispatch(addTaskAC({task}))\r\n      dispatch(setAppStatusAC({status: 'succeeded'}))\r\n    } else {\r\n      handleServerAppError(response.data, dispatch);\r\n    }\r\n  } catch (error) {\r\n    if (axios.isAxiosError(error)) handleServerNetworkError(error, dispatch)\r\n  }\r\n}\r\n\r\nexport const updateTaskTC = (taskId: string, model: UpdateDomainTaskModelType, todolistId: string) =>\r\n  async (dispatch: Dispatch, getState: () => AppRootStateType) => {\r\n    const state = getState()\r\n    const task = state.tasks[todolistId].find(t => t.id === taskId)\r\n    if (!task) {\r\n      //throw new Error(\"task not found in the state\");\r\n      console.warn('task not found in the state')\r\n      return\r\n    }\r\n\r\n    const apiModel: UpdateTaskModelType = {\r\n      deadline: task.deadline,\r\n      description: task.description,\r\n      priority: task.priority,\r\n      startDate: task.startDate,\r\n      title: task.title,\r\n      status: task.status,\r\n      ...model\r\n    }\r\n\r\n    try {\r\n      const response = await todolistsAPI.updateTask(todolistId, taskId, apiModel)\r\n      if (response.data.resultCode === 0) {\r\n        const action = updateTaskAC({taskId, model, todolistId})\r\n        dispatch(action)\r\n      } else {\r\n        handleServerAppError(response.data, dispatch);\r\n      }\r\n    } catch (error) {\r\n      if (axios.isAxiosError(error)) handleServerNetworkError(error, dispatch);\r\n    }\r\n  }\r\n\r\n// types\r\nexport type UpdateDomainTaskModelType = {\r\n  title?: string\r\n  description?: string\r\n  status?: TaskStatuses\r\n  priority?: TaskPriorities\r\n  startDate?: string\r\n  deadline?: string\r\n}\r\nexport type TasksStateType = {\r\n  [key: string]: Array<TaskType>\r\n}\r\n","import React, {ChangeEvent, KeyboardEvent, useState} from 'react';\r\nimport TextField from '@mui/material/TextField';\r\nimport IconButton from '@mui/material/IconButton';\r\nimport {AddBox} from '@mui/icons-material';\r\n\r\ntype AddItemFormPropsType = {\r\n  addItem: (title: string) => void\r\n  disabled?: boolean\r\n}\r\n\r\nexport const AddItemForm = React.memo(function ({addItem, disabled = false}: AddItemFormPropsType) {\r\n  const [title, setTitle] = useState('')\r\n  const [error, setError] = useState<string | null>(null)\r\n\r\n  const addItemHandler = () => {\r\n    if (title.trim() !== '') {\r\n      addItem(title);\r\n      setTitle('');\r\n    } else {\r\n      setError('Title is required');\r\n    }\r\n  }\r\n\r\n  const onChangeHandler = (e: ChangeEvent<HTMLInputElement>) => {\r\n    setTitle(e.currentTarget.value)\r\n  }\r\n\r\n  const onKeyPressHandler = (e: KeyboardEvent<HTMLInputElement>) => {\r\n    if (error !== null) {\r\n      setError(null);\r\n    }\r\n    if (e.charCode === 13) {\r\n      addItemHandler();\r\n    }\r\n  }\r\n\r\n  return (\r\n    <div className={'add-item'}>\r\n      <TextField variant=\"outlined\"\r\n                 disabled={disabled}\r\n                 error={!!error}\r\n                 value={title}\r\n                 onChange={onChangeHandler}\r\n                 onKeyPress={onKeyPressHandler}\r\n                 label=\"Title\"\r\n                 helperText={error}\r\n      />\r\n      <IconButton color=\"success\" onClick={addItemHandler} disabled={disabled}>\r\n        <AddBox/>\r\n      </IconButton>\r\n    </div>\r\n  )\r\n})\r\n","import React, { ChangeEvent, useState } from 'react';\r\nimport TextField from '@mui/material/TextField';\r\n\r\ntype EditableSpanPropsType = {\r\n    value: string\r\n    onChange: (newValue: string) => void\r\n}\r\n\r\nexport const EditableSpan = React.memo(function ({value, onChange}: EditableSpanPropsType) {\r\n    const [editMode, setEditMode] = useState(false);\r\n    const [title, setTitle] = useState(value);\r\n\r\n    const activateEditMode = () => {\r\n        setEditMode(true);\r\n        setTitle(value);\r\n    }\r\n    const activateViewMode = () => {\r\n        setEditMode(false);\r\n        onChange(title);\r\n    }\r\n    const changeTitle = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setTitle(e.currentTarget.value)\r\n    }\r\n\r\n    return editMode\r\n        ? <TextField classes={{root: 'editableInput'}} color={'success'} value={title} onChange={changeTitle} autoFocus onBlur={activateViewMode}/>\r\n        : <span className={'title'} onDoubleClick={activateEditMode}>{value}</span>\r\n});\r\n","import React, {ChangeEvent, useCallback} from 'react'\r\nimport {EditableSpan} from '../../../../components/EditableSpan/EditableSpan'\r\nimport DeleteForeverIcon from '@mui/icons-material/DeleteForever';\r\nimport IconButton from '@mui/material/IconButton';\r\nimport Checkbox from '@mui/material/Checkbox';\r\nimport {TaskStatuses, TaskType} from '../../../../api/todolists-api'\r\n\r\nexport const Task = React.memo((props: TaskPropsType) => {\r\n  const {task, todolistId, changeTaskStatus, changeTaskTitle, removeTask} = props\r\n\r\n  const onClickHandler = useCallback(() => removeTask(task.id, todolistId), [task.id, todolistId, removeTask]);\r\n\r\n  const onChangeHandler = useCallback((e: ChangeEvent<HTMLInputElement>) => {\r\n    let newIsDoneValue = e.currentTarget.checked\r\n    changeTaskStatus(task.id, newIsDoneValue ? TaskStatuses.Completed : TaskStatuses.New, todolistId)\r\n  }, [task.id, todolistId, changeTaskStatus]);\r\n\r\n  const onTitleChangeHandler = useCallback((newValue: string) => {\r\n    changeTaskTitle(task.id, newValue, todolistId)\r\n  }, [task.id, todolistId, changeTaskTitle]);\r\n\r\n  return (\r\n    <div key={task.id} className={[task.status === TaskStatuses.Completed ? 'is-done' : '', 'task'].join(' ')}>\r\n      <Checkbox\r\n        checked={task.status === TaskStatuses.Completed}\r\n        color=\"success\"\r\n        onChange={onChangeHandler}\r\n      />\r\n\r\n      <EditableSpan value={task.title} onChange={onTitleChangeHandler}/>\r\n      <IconButton onClick={onClickHandler}>\r\n        <DeleteForeverIcon/>\r\n      </IconButton>\r\n    </div>\r\n  )\r\n})\r\n\r\ntype TaskPropsType = {\r\n  task: TaskType\r\n  todolistId: string\r\n  changeTaskStatus: (id: string, status: TaskStatuses, todolistId: string) => void\r\n  changeTaskTitle: (taskId: string, newTitle: string, todolistId: string) => void\r\n  removeTask: (taskId: string, todolistId: string) => void\r\n}","import React, {useCallback, useEffect} from 'react'\r\nimport {AddItemForm} from '../../../components/AddItemForm/AddItemForm'\r\nimport {EditableSpan} from '../../../components/EditableSpan/EditableSpan'\r\nimport IconButton from '@mui/material/IconButton';\r\nimport Button from '@mui/material/Button';\r\nimport {Delete} from '@mui/icons-material';\r\nimport {Task} from './Task/Task'\r\nimport {TaskStatuses, TaskType} from '../../../api/todolists-api'\r\nimport {FilterValuesType, TodolistDomainType} from '../todolists-reducer'\r\nimport {useDispatch} from 'react-redux'\r\nimport {fetchTasksTC} from '../tasks-reducer'\r\n\r\nexport const Todolist = React.memo(function ({demo = false, ...props}: PropsType) {\r\n\r\n  const {todolist, tasks, changeFilter, changeTaskStatus, changeTaskTitle, removeTask} = props\r\n  const dispatch = useDispatch()\r\n\r\n  useEffect(() => {\r\n    if (demo) {\r\n      return\r\n    }\r\n    dispatch(fetchTasksTC(todolist.id))\r\n  }, [todolist.id, demo, dispatch])\r\n\r\n  const addTask = useCallback((title: string) => {\r\n    props.addTask(title, todolist.id)\r\n  }, [props, todolist.id])\r\n\r\n  const removeTodolist = () => {\r\n    props.removeTodolist(todolist.id)\r\n  }\r\n  const changeTodolistTitle = useCallback((title: string) => {\r\n    props.changeTodolistTitle(todolist.id, title)\r\n  }, [todolist.id, props])\r\n\r\n  const onAllClickHandler = useCallback(() => changeFilter('all', todolist.id), [todolist.id, changeFilter])\r\n  const onActiveClickHandler = useCallback(() => changeFilter('active', todolist.id), [todolist.id, changeFilter])\r\n  const onCompletedClickHandler = useCallback(() => changeFilter('completed', todolist.id), [todolist.id, changeFilter])\r\n\r\n  let tasksForTodolist = tasks\r\n\r\n  if (todolist.filter === 'active') {\r\n    tasksForTodolist = tasks.filter(t => t.status === TaskStatuses.New)\r\n  }\r\n  if (todolist.filter === 'completed') {\r\n    tasksForTodolist = tasks.filter(t => t.status === TaskStatuses.Completed)\r\n  }\r\n\r\n  return (\r\n    <div>\r\n      <h3 className={'todolist-title'}><EditableSpan value={todolist.title} onChange={changeTodolistTitle}/>\r\n        <IconButton onClick={removeTodolist} disabled={todolist.entityStatus === 'loading'}>\r\n          <Delete/>\r\n        </IconButton>\r\n      </h3>\r\n      <AddItemForm addItem={addTask} disabled={todolist.entityStatus === 'loading'}/>\r\n      <div>\r\n        {\r\n          tasksForTodolist.map(t => <Task key={t.id} task={t} todolistId={todolist.id}\r\n                                          removeTask={removeTask}\r\n                                          changeTaskTitle={changeTaskTitle}\r\n                                          changeTaskStatus={changeTaskStatus}\r\n          />)\r\n        }\r\n      </div>\r\n      <div style={{paddingTop: '10px'}}>\r\n        <Button variant={todolist.filter === 'all' ? 'outlined' : 'text'}\r\n                onClick={onAllClickHandler}\r\n                classes={{root: 'buttonFilter', text: 'buttonFilterText'}}\r\n        >\r\n          All\r\n        </Button>\r\n        <Button variant={todolist.filter === 'active' ? 'outlined' : 'text'}\r\n                onClick={onActiveClickHandler}\r\n                classes={{root: 'buttonFilter', text: 'buttonFilterText'}}\r\n        >\r\n          Active\r\n        </Button>\r\n        <Button variant={todolist.filter === 'completed' ? 'outlined' : 'text'}\r\n                onClick={onCompletedClickHandler}\r\n                classes={{root: 'buttonFilter', text: 'buttonFilterText'}}\r\n        >\r\n          Completed\r\n        </Button>\r\n      </div>\r\n    </div>\r\n  )\r\n})\r\n\r\ntype PropsType = {\r\n  todolist: TodolistDomainType\r\n  tasks: Array<TaskType>\r\n  changeFilter: (value: FilterValuesType, todolistId: string) => void\r\n  addTask: (title: string, todolistId: string) => void\r\n  changeTaskStatus: (id: string, status: TaskStatuses, todolistId: string) => void\r\n  changeTaskTitle: (taskId: string, newTitle: string, todolistId: string) => void\r\n  removeTask: (taskId: string, todolistId: string) => void\r\n  removeTodolist: (id: string) => void\r\n  changeTodolistTitle: (id: string, newTitle: string) => void\r\n  demo?: boolean\r\n}\r\n","import React, {useCallback, useEffect} from 'react'\r\nimport {useDispatch, useSelector} from 'react-redux'\r\nimport {AppRootStateType} from '../../app/store'\r\nimport {\r\n  addTodolistTC,\r\n  changeTodolistFilterAC,\r\n  changeTodolistTitleTC,\r\n  fetchTodolistsTC,\r\n  FilterValuesType,\r\n  removeTodolistTC,\r\n  TodolistDomainType\r\n} from './todolists-reducer'\r\nimport {addTaskTC, removeTaskTC, TasksStateType, updateTaskTC} from './tasks-reducer'\r\nimport {TaskStatuses} from '../../api/todolists-api'\r\nimport Grid from '@mui/material/Grid';\r\nimport Paper from '@mui/material/Paper';\r\nimport {AddItemForm} from '../../components/AddItemForm/AddItemForm'\r\nimport {Todolist} from './Todolist/Todolist'\r\nimport {useNavigate} from \"react-router-dom\";\r\n\r\nexport const TodolistsList: React.FC<PropsType> = ({demo = false}) => {\r\n  const todolists = useSelector<AppRootStateType, Array<TodolistDomainType>>(state => state.todolists)\r\n  const tasks = useSelector<AppRootStateType, TasksStateType>(state => state.tasks)\r\n  const isLoggedIn = useSelector<AppRootStateType, boolean>(state => state.auth.isLoggedIn)\r\n\r\n  const dispatch = useDispatch()\r\n\r\n  useEffect(() => {\r\n    if (demo || !isLoggedIn) {\r\n      return;\r\n    }\r\n    dispatch(fetchTodolistsTC())\r\n  }, [demo, isLoggedIn, dispatch])\r\n\r\n  const removeTask = useCallback(function (id: string, todolistId: string) {\r\n    dispatch(removeTaskTC(id, todolistId))\r\n  }, [dispatch])\r\n\r\n  const addTask = useCallback(function (title: string, todolistId: string) {\r\n    dispatch(addTaskTC(title, todolistId))\r\n  }, [dispatch])\r\n\r\n  const changeStatus = useCallback(function (id: string, status: TaskStatuses, todolistId: string) {\r\n    dispatch(updateTaskTC(id, {status}, todolistId))\r\n  }, [dispatch])\r\n\r\n  const changeTaskTitle = useCallback(function (id: string, newTitle: string, todolistId: string) {\r\n    dispatch(updateTaskTC(id, {title: newTitle}, todolistId))\r\n  }, [dispatch])\r\n\r\n  const changeFilter = useCallback(function (value: FilterValuesType, todolistId: string) {\r\n    dispatch(changeTodolistFilterAC({id: todolistId, filter: value}))\r\n  }, [dispatch])\r\n\r\n  const removeTodolist = useCallback(function (id: string) {\r\n    dispatch(removeTodolistTC(id))\r\n  }, [dispatch])\r\n\r\n  const changeTodolistTitle = useCallback(function (id: string, title: string) {\r\n    dispatch(changeTodolistTitleTC(id, title))\r\n  }, [dispatch])\r\n\r\n  const addTodolist = useCallback((title: string) => {\r\n    dispatch(addTodolistTC(title))\r\n  }, [dispatch])\r\n\r\n  const n = useNavigate()\r\n  if (!isLoggedIn) n('/login')\r\n\r\n  return <>\r\n    <Grid container style={{padding: '20px'}}>\r\n      <AddItemForm addItem={addTodolist}/>\r\n    </Grid>\r\n    <Grid container spacing={3}>\r\n      {\r\n        todolists.map(tl => {\r\n          let allTodolistTasks = tasks[tl.id]\r\n\r\n          return <Grid item key={tl.id}>\r\n            <Paper style={{padding: '10px'}}>\r\n              <Todolist\r\n                todolist={tl}\r\n                tasks={allTodolistTasks}\r\n                removeTask={removeTask}\r\n                changeFilter={changeFilter}\r\n                addTask={addTask}\r\n                changeTaskStatus={changeStatus}\r\n                removeTodolist={removeTodolist}\r\n                changeTaskTitle={changeTaskTitle}\r\n                changeTodolistTitle={changeTodolistTitle}\r\n                demo={demo}\r\n              />\r\n            </Paper>\r\n          </Grid>\r\n        })\r\n      }\r\n    </Grid>\r\n  </>\r\n}\r\n\r\ntype PropsType = {\r\n  demo?: boolean\r\n}","import React from 'react';\r\nimport Snackbar from '@mui/material/Snackbar';\r\nimport MuiAlert, { AlertProps } from '@mui/material/Alert';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { AppRootStateType } from '../../app/store';\r\nimport { setAppErrorAC } from '../../app/app-reducer';\r\n\r\nconst Alert = React.forwardRef<HTMLDivElement, AlertProps>(function Alert(\r\n    props, ref) {\r\n    return <MuiAlert elevation={6} ref={ref} variant=\"filled\" {...props} />;\r\n});\r\n\r\n\r\nexport function ErrorSnackbar() {\r\n    const error = useSelector<AppRootStateType, string | null>(state => state.app.error)\r\n    const dispatch = useDispatch();\r\n\r\n    const handleClose = (event?: React.SyntheticEvent, reason?: string) => {\r\n        if (reason === 'clickaway') {\r\n            return;\r\n        }\r\n        dispatch(setAppErrorAC({error: null}))\r\n    };\r\n\r\n    return (\r\n        <Snackbar open={error !== null} autoHideDuration={6000} onClose={handleClose}>\r\n            <Alert onClose={handleClose} severity=\"error\" sx={{width: '100%'}}>\r\n                {error}\r\n            </Alert>\r\n        </Snackbar>\r\n    );\r\n}\r\n","import React from 'react'\nimport Grid from '@mui/material/Grid';\nimport Checkbox from '@mui/material/Checkbox';\nimport FormControl from '@mui/material/FormControl';\nimport FormControlLabel from '@mui/material/FormControlLabel';\nimport FormGroup from '@mui/material/FormGroup';\nimport FormLabel from '@mui/material/FormLabel';\nimport TextField from '@mui/material/TextField';\nimport Button from '@mui/material/Button';\nimport {useFormik} from \"formik\";\nimport {useDispatch, useSelector} from \"react-redux\";\nimport {loginTC} from \"./auth-reducer\";\nimport {AppRootStateType} from \"../../app/store\";\nimport {useNavigate} from \"react-router-dom\";\n\nexport type LoginParamsType = {\n  email: string\n  password: string\n}\n\nexport const Login = () => {\n  type FormikErrorType = {\n    email?: string\n    password?: string\n    rememberMe?: boolean\n  }\n\n  const dispatch = useDispatch()\n\n  const formik = useFormik({\n    initialValues: {\n      email: '',\n      password: '',\n      rememberMe: false\n    },\n    validate: (values) => {\n      const errors: FormikErrorType = {};\n      if (!values.email) {\n        errors.email = 'Required';\n      } else if (!/^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,4}$/i.test(values.email)) {\n        errors.email = 'Invalid email address';\n      }\n      if (!values.password) {\n        errors.password = 'Required';\n      } else if (values.password.length < 3) {\n        errors.password = 'Password should content more than 2 symbols';\n      }\n      return errors;\n    },\n    onSubmit: values => {\n      dispatch(loginTC(values))\n      formik.resetForm()\n    },\n  })\n\n  const isLoggedIn = useSelector((state: AppRootStateType) => state.auth.isLoggedIn)\n  const navigate = useNavigate()\n\n  if(isLoggedIn) navigate('/')\n\n  return <Grid container justifyContent={'center'}>\n    <Grid item justifyContent={'center'}>\n      <form onSubmit={formik.handleSubmit}>\n        <FormControl>\n          <FormLabel>\n            <p>To log in get registered\n              <a href={'https://social-network.samuraijs.com/'}\n                 target={'_blank'} rel=\"noreferrer\"> here\n              </a>\n            </p>\n            <p>or use common test account credentials:</p>\n            <p>Email: free@samuraijs.com</p>\n            <p>Password: free</p>\n          </FormLabel>\n          <FormGroup>\n            <TextField\n              label=\"Email\"\n              margin=\"normal\"\n              {...formik.getFieldProps('email')}\n              error={!!formik.errors.email && formik.touched.email}\n              helperText={formik.touched.email ? formik.errors.email : ''}\n            />\n            <TextField\n              label=\"Password\"\n              margin=\"normal\"\n              {...formik.getFieldProps('password')}\n              error={!!formik.errors.password && formik.touched.password}\n              helperText={formik.touched.password ? formik.errors.password : ''}\n            />\n            <FormControlLabel\n              label={'Remember me'}\n              control={\n                <Checkbox\n                  name={\"rememberMe\"}\n                  onChange={formik.handleChange}\n                  checked={formik.values.rememberMe}\n                />\n              }\n            />\n            <Button type={'submit'} variant={'contained'} color={'primary'}>\n              Login\n            </Button>\n          </FormGroup>\n        </FormControl>\n      </form>\n    </Grid>\n  </Grid>\n}\n","import React, {useEffect} from 'react'\r\nimport './App.css'\r\nimport {TodolistsList} from '../features/TodolistsList/TodolistsList'\r\nimport {useDispatch, useSelector} from 'react-redux'\r\nimport {AppRootStateType} from './store'\r\nimport {initializeAppTC, RequestStatusType} from './app-reducer'\r\nimport AppBar from '@mui/material/AppBar';\r\nimport Toolbar from '@mui/material/Toolbar';\r\nimport IconButton from '@mui/material/IconButton';\r\nimport Typography from '@mui/material/Typography';\r\nimport Button from '@mui/material/Button';\r\nimport Container from '@mui/material/Container';\r\nimport LinearProgress from '@mui/material/LinearProgress';\r\nimport PlaylistAddCheckIcon from '@mui/icons-material/PlaylistAddCheck';\r\nimport {ErrorSnackbar} from '../components/ErrorSnackbar/ErrorSnackbar'\r\nimport {Login} from \"../features/Login/Login\";\r\nimport {Routes, Route} from \"react-router-dom\";\r\nimport {CircularProgress} from \"@mui/material\";\r\nimport {logoutTC} from \"../features/Login/auth-reducer\";\r\n\r\ntype PropsType = {\r\n  demo?: boolean\r\n}\r\n\r\nfunction App({demo = false}: PropsType) {\r\n  const status = useSelector<AppRootStateType, RequestStatusType>((state) => state.app.status)\r\n  const isInitialized = useSelector<AppRootStateType, boolean>((state) => state.app.isInitialized)\r\n  const isLoggedIn = useSelector<AppRootStateType, boolean>((state) => state.auth.isLoggedIn)\r\n\r\n  const dispatch = useDispatch()\r\n\r\n  useEffect(() => {\r\n    dispatch(initializeAppTC())\r\n  }, [dispatch])\r\n\r\n  if (!isInitialized) {\r\n    return <div\r\n      style={{position: 'fixed', top: '30%', textAlign: 'center', width: '100%'}}>\r\n      <CircularProgress/>\r\n    </div>\r\n  }\r\n\r\n  const onLogOut = () => {\r\n    dispatch(logoutTC())\r\n  }\r\n\r\n  return (\r\n    <div className=\"App\">\r\n      <ErrorSnackbar/>\r\n      <AppBar position=\"static\">\r\n        <Toolbar>\r\n          <IconButton edge=\"start\" color=\"inherit\" aria-label=\"todolist\">\r\n            <PlaylistAddCheckIcon/>\r\n          </IconButton>\r\n          <Typography variant=\"h6\">\r\n            Your Todo lists\r\n          </Typography>\r\n          {isLoggedIn && <Button onClick={onLogOut} color={\"inherit\"}>Log out</Button>}\r\n        </Toolbar>\r\n        {status === 'loading' && <LinearProgress color={'success'}/>}\r\n      </AppBar>\r\n      <Container fixed>\r\n        <Routes>\r\n          <Route path={'/'} element={<TodolistsList demo={demo}/>}/>\r\n          <Route path={'/login'} element={<Login/>}/>\r\n          <Route path={'/*'} element={<div>404</div>}/>\r\n        </Routes>\r\n      </Container>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default App\r\n","import {tasksReducer} from '../features/TodolistsList/tasks-reducer';\r\nimport {todolistsReducer} from '../features/TodolistsList/todolists-reducer';\r\nimport {applyMiddleware, combineReducers, createStore} from 'redux'\r\nimport thunkMiddleware from 'redux-thunk'\r\nimport {appReducer} from './app-reducer'\r\nimport {authReducer} from \"../features/Login/auth-reducer\";\r\nimport {configureStore} from \"@reduxjs/toolkit\";\r\n\r\nconst rootReducer = combineReducers({\r\n  tasks: tasksReducer,\r\n  todolists: todolistsReducer,\r\n  app: appReducer,\r\n  auth: authReducer,\r\n})\r\n// export const store = createStore(rootReducer, applyMiddleware(thunkMiddleware));\r\n// подробно в документации redux toolkit\r\nexport const store = configureStore({\r\n  reducer: rootReducer,\r\n  middleware: (getDefaultMiddleware) => getDefaultMiddleware()\r\n    .prepend(thunkMiddleware) //добавляем к getDefaultMiddleware thunkMiddleware\r\n})\r\nexport type AppRootStateType = ReturnType<typeof rootReducer>\r\n\r\n// @ts-ignore\r\nwindow.store = store;\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport reportWebVitals from './reportWebVitals';\nimport App from './app/App';\nimport {Provider} from 'react-redux';\nimport {store} from './app/store';\nimport {HashRouter} from \"react-router-dom\";\n\nReactDOM.render(\n    <React.StrictMode>\n      <HashRouter>\n        <Provider store={store}>\n            <App/>\n        </Provider>\n        </HashRouter>\n    </React.StrictMode>,\n    document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}