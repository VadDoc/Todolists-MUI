{"version":3,"sources":["api/todolists-api.ts","reportWebVitals.ts","utils/error-utils.ts","features/Login/auth-reducer.ts","app/app-reducer.ts","features/TodolistsList/todolists-reducer.ts","features/TodolistsList/tasks-reducer.ts","components/AddItemForm/AddItemForm.tsx","components/EditableSpan/EditableSpan.tsx","features/TodolistsList/Todolist/Task/Task.tsx","features/TodolistsList/Todolist/Todolist.tsx","features/TodolistsList/TodolistsList.tsx","components/ErrorSnackbar/ErrorSnackbar.tsx","features/Login/Login.tsx","app/App.tsx","app/store.ts","index.tsx"],"names":["TaskStatuses","TaskPriorities","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","instance","axios","create","baseURL","withCredentials","headers","todolistsAPI","get","title","post","id","delete","put","todolistId","taskId","model","authAPI","data","handleServerAppError","dispatch","messages","length","setAppErrorAC","setAppStatusAC","handleServerNetworkError","error","message","initialState","isLoggedIn","setIsLoggedInAC","value","type","status","isInitialized","setIsInitializedAC","removeTodolistAC","changeTodolistTitleAC","removeTaskAC","addTaskAC","task","updateTaskAC","setTasksAC","tasks","updateTaskTC","domainModel","getState","a","state","find","t","console","warn","apiModel","deadline","description","priority","startDate","response","resultCode","action","isAxiosError","AddItemForm","React","memo","addItem","disabled","useState","setTitle","setError","addItemHandler","trim","className","TextField","variant","onChange","e","currentTarget","onKeyPress","charCode","label","helperText","IconButton","color","onClick","AddBox","EditableSpan","log","editMode","setEditMode","classes","root","autoFocus","onBlur","onDoubleClick","Task","props","changeTaskStatus","changeTaskTitle","removeTask","onClickHandler","useCallback","onChangeHandler","newIsDoneValue","checked","Completed","New","onTitleChangeHandler","newValue","join","Checkbox","Todolist","demo","todolist","changeFilter","useDispatch","useEffect","items","addTask","changeTodolistTitle","onAllClickHandler","onActiveClickHandler","onCompletedClickHandler","tasksForTodolist","filter","removeTodolist","entityStatus","Delete","map","style","paddingTop","Button","text","TodolistsList","todolists","useSelector","auth","thunk","removeTaskTC","item","addTaskTC","changeStatus","newTitle","changeTodolistTitleTC","addTodolist","addTodolistTC","n","useNavigate","Grid","container","padding","spacing","tl","allTodolistTasks","Paper","Alert","forwardRef","ref","elevation","ErrorSnackbar","app","handleClose","event","reason","Snackbar","open","autoHideDuration","onClose","severity","sx","width","Login","formik","useFormik","initialValues","email","password","rememberMe","validate","values","errors","test","onSubmit","res","catch","finally","resetForm","navigate","justifyContent","handleSubmit","FormControl","FormLabel","href","target","FormGroup","margin","getFieldProps","touched","FormControlLabel","control","name","handleChange","App","AppBar","position","Toolbar","edge","aria-label","Typography","LinearProgress","Container","fixed","path","element","top","textAlign","CircularProgress","rootReducer","combineReducers","todoListId","copyState","forEach","store","createStore","applyMiddleware","thunkMiddleware","window","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.61e983dc.chunk.js","sourcesContent":["import axios, {AxiosResponse} from 'axios'\r\nimport {LoginParamsType} from \"../features/Login/Login\";\r\n\r\nconst instance = axios.create({\r\n  baseURL: 'https://social-network.samuraijs.com/api/1.1/',\r\n  withCredentials: true,\r\n  headers: {\r\n    'API-KEY': 'b1080483-6498-445e-9780-91e9c47f08f9'\r\n  }\r\n})\r\n\r\n// api\r\nexport const todolistsAPI = {\r\n  getTodolists() {\r\n    return instance.get<TodolistType[]>('todo-lists');\r\n  },\r\n  createTodolist(title: string) {\r\n    return instance.post<{ title: string }, AxiosResponse<ResponseType<{ item: TodolistType }>>>('todo-lists', {title});\r\n  },\r\n  deleteTodolist(id: string) {\r\n    return instance.delete<ResponseType>(`todo-lists/${id}`);\r\n  },\r\n  updateTodolist(id: string, title: string) {\r\n    return instance.put<{ title: string }, AxiosResponse<ResponseType>>(`todo-lists/${id}`, {title});\r\n  },\r\n  getTasks(todolistId: string) {\r\n    return instance.get<GetTasksResponse>(`todo-lists/${todolistId}/tasks`);\r\n  },\r\n  deleteTask(todolistId: string, taskId: string) {\r\n    return instance.delete<ResponseType>(`todo-lists/${todolistId}/tasks/${taskId}`);\r\n  },\r\n  createTask(todolistId: string, title: string) {\r\n    return instance.post<{ title: string },\r\n      AxiosResponse<ResponseType<{ item: TaskType }>>>(`todo-lists/${todolistId}/tasks`, {title});\r\n  },\r\n  updateTask(todolistId: string, taskId: string, model: UpdateTaskModelType) {\r\n    return instance.put<UpdateTaskModelType,\r\n      AxiosResponse<ResponseType<{ item: TaskType }>>>(`todo-lists/${todolistId}/tasks/${taskId}`, model);\r\n  }\r\n}\r\n\r\nexport const authAPI = {\r\n  login(data: LoginParamsType) {\r\n    return instance.post<LoginParamsType,\r\n      AxiosResponse<ResponseType<{ userId: number }>>>(`auth/login`, data)\r\n  },\r\n  me() {\r\n    return instance.get<AuthResponseType,\r\n      AxiosResponse<ResponseType<AuthMeType>>>(`auth/me`)\r\n  },\r\n  logout() {\r\n    return instance.delete<AuthResponseType,\r\n      AxiosResponse<ResponseType<{ userId: number }>>>('/auth/login')\r\n  }\r\n}\r\n\r\n// types\r\ntype AuthMeType = {\r\n  resultCode: number\r\n  messages: string[]\r\n  data: {\r\n    id: number\r\n    email: string\r\n    login: string\r\n  }\r\n}\r\n\r\nexport type TodolistType = {\r\n  id: string\r\n  title: string\r\n  addedDate: string\r\n  order: number\r\n}\r\n\r\nexport type ResponseType<D = {}> = {\r\n  resultCode: number\r\n  messages: Array<string>\r\n  fieldsErrors: Array<string>\r\n  data: D\r\n}\r\n\r\nexport enum TaskStatuses {\r\n  New = 0,\r\n  InProgress = 1,\r\n  Completed = 2,\r\n  Draft = 3\r\n}\r\n\r\nexport enum TaskPriorities {\r\n  Low = 0,\r\n  Middle = 1,\r\n  Hi = 2,\r\n  Urgently = 3,\r\n  Later = 4\r\n}\r\n\r\nexport type TaskType = {\r\n  description: string\r\n  title: string\r\n  status: TaskStatuses\r\n  priority: TaskPriorities\r\n  startDate: string\r\n  deadline: string\r\n  id: string\r\n  todoListId: string\r\n  order: number\r\n  addedDate: string\r\n}\r\n\r\nexport type UpdateTaskModelType = {\r\n  title: string\r\n  description: string\r\n  status: TaskStatuses\r\n  priority: TaskPriorities\r\n  startDate: string\r\n  deadline: string\r\n}\r\n\r\ntype GetTasksResponse = {\r\n  error: string | null\r\n  totalCount: number\r\n  items: TaskType[]\r\n}\r\n\r\ntype AuthResponseType = {\r\n  resultCode: number\r\n  messages: Array<string>\r\n  data: {\r\n    id: number\r\n    email: string\r\n    login: string\r\n  }\r\n}\r\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import {setAppErrorAC, SetAppErrorActionType, setAppStatusAC, SetAppStatusActionType} from '../app/app-reducer'\r\nimport {ResponseType} from '../api/todolists-api'\r\nimport {Dispatch} from 'redux'\r\n\r\nexport const handleServerAppError = <D>(data: ResponseType<D>, dispatch: Dispatch<SetAppErrorActionType | SetAppStatusActionType>) => {\r\n    if (data.messages.length) {\r\n        dispatch(setAppErrorAC(data.messages[0]))\r\n    } else {\r\n        dispatch(setAppErrorAC('Some error occurred'))\r\n    }\r\n    dispatch(setAppStatusAC('failed'))\r\n}\r\n\r\nexport const handleServerNetworkError = (error: { message: string }, dispatch: Dispatch<SetAppErrorActionType | SetAppStatusActionType>) => {\r\n    dispatch(setAppErrorAC(error.message ? error.message : 'Some error occurred'))\r\n    dispatch(setAppStatusAC('failed'))\r\n}\r\n","import {Dispatch} from 'redux'\nimport {SetAppErrorActionType, setAppStatusAC, SetAppStatusActionType} from '../../app/app-reducer'\nimport {authAPI} from \"../../api/todolists-api\";\nimport {handleServerAppError, handleServerNetworkError} from \"../../utils/error-utils\";\nimport axios from \"axios\";\n\n\nconst initialState = {\n  isLoggedIn: false\n}\ntype InitialStateType = typeof initialState\n\nexport const authReducer = (state: InitialStateType = initialState, action: ActionsType): InitialStateType => {\n  switch (action.type) {\n    case 'login/SET-IS-LOGGED-IN':\n      return {...state, isLoggedIn: action.value}\n    default:\n      return state\n  }\n}\n\n// actions\nexport const setIsLoggedInAC = (value: boolean) =>\n  ({type: 'login/SET-IS-LOGGED-IN', value} as const)\n\n// thunks\nexport const loginTC = (data: any) => (dispatch: Dispatch<ActionsType>) => {\n  dispatch(setAppStatusAC('loading'))\n  authAPI.login(data)\n    .then(res => {\n      if (res.data.resultCode === 0) {\n        dispatch(setIsLoggedInAC(true))\n        dispatch(setAppStatusAC('succeeded'))\n      } else {\n        handleServerAppError(res.data, dispatch);\n      }\n    })\n    .catch((error) => {\n      handleServerNetworkError(error, dispatch)\n    })\n    .finally(() => dispatch(setAppStatusAC('idle')))\n}\n\nexport const logoutTC = () => async (dispatch: Dispatch<ActionsType>) => {\n  dispatch(setAppStatusAC('loading'))\n  try {\n    const response = await authAPI.logout()\n    if (response.data.resultCode === 0) {\n      dispatch(setIsLoggedInAC(false))\n      dispatch(setAppStatusAC('succeeded'))\n    } else {\n      handleServerAppError(response.data, dispatch)\n    }\n  } catch (error) {\n    if (axios.isAxiosError(error)) handleServerNetworkError(error, dispatch)\n  }\n}\n\n// types\ntype ActionsType = ReturnType<typeof setIsLoggedInAC> | SetAppStatusActionType | SetAppErrorActionType\n\n","import {authAPI} from \"../api/todolists-api\";\r\nimport {Dispatch} from 'redux'\r\nimport {setIsLoggedInAC} from \"../features/Login/auth-reducer\";\r\nimport {handleServerAppError, handleServerNetworkError} from \"../utils/error-utils\";\r\nimport axios from \"axios\";\r\n\r\n\r\nconst initialState: InitialStateType = {\r\n  status: 'idle',\r\n  error: null,\r\n  isInitialized: false\r\n}\r\n\r\nexport const appReducer = (state: InitialStateType = initialState, action: ActionsType): InitialStateType => {\r\n  switch (action.type) {\r\n    case 'APP/SET-STATUS':\r\n      return {...state, status: action.status}\r\n    case 'APP/SET-ERROR':\r\n      return {...state, error: action.error}\r\n    case 'APP/SET-IS-INITIALIZED':\r\n      return {...state, isInitialized: action.value}\r\n    default:\r\n      return {...state}\r\n  }\r\n}\r\n\r\nexport const initializeAppTC = () => async (dispatch: Dispatch) => {\r\n  dispatch(setAppStatusAC('loading'))\r\n  try {\r\n    const response = await authAPI.me()\r\n    if (response.data.resultCode === 0) {\r\n      dispatch(setIsLoggedInAC(true));\r\n    } else {\r\n      handleServerAppError(response.data, dispatch);\r\n    }\r\n  } catch(error) {\r\n    if(axios.isAxiosError(error)) {\r\n      handleServerNetworkError(error, dispatch)\r\n    }\r\n  } finally {\r\n    dispatch(setIsInitializedAC(true))\r\n  }\r\n}\r\n\r\n\r\nexport type RequestStatusType = 'idle' | 'loading' | 'succeeded' | 'failed'\r\nexport type InitialStateType = {\r\n  status: RequestStatusType\r\n  error: string | null\r\n  isInitialized: boolean\r\n}\r\n\r\nexport const setAppErrorAC = (error: string | null) => ({type: 'APP/SET-ERROR', error} as const)\r\nexport const setAppStatusAC = (status: RequestStatusType) => ({type: 'APP/SET-STATUS', status} as const)\r\nexport const setIsInitializedAC = (value: boolean) => ({type: 'APP/SET-IS-INITIALIZED', value} as const)\r\n\r\nexport type SetAppErrorActionType = ReturnType<typeof setAppErrorAC>\r\nexport type SetAppStatusActionType = ReturnType<typeof setAppStatusAC>\r\nexport type SetIsInitializedActionType = ReturnType<typeof setIsInitializedAC>\r\n\r\ntype ActionsType =\r\n  | SetAppErrorActionType\r\n  | SetAppStatusActionType\r\n  | SetIsInitializedActionType\r\n","import {todolistsAPI, TodolistType} from '../../api/todolists-api'\r\nimport {Dispatch} from 'redux'\r\nimport {RequestStatusType, setAppStatusAC, SetAppStatusActionType} from '../../app/app-reducer'\r\n\r\nconst initialState: Array<TodolistDomainType> = []\r\n\r\nexport const todolistsReducer = (state: Array<TodolistDomainType> = initialState, action: ActionsType): Array<TodolistDomainType> => {\r\n  switch (action.type) {\r\n    case 'REMOVE-TODOLIST':\r\n      return state.filter(tl => tl.id !== action.id)\r\n    case 'ADD-TODOLIST':\r\n      return [{...action.todolist, filter: 'all', entityStatus: 'idle'}, ...state]\r\n\r\n    case 'CHANGE-TODOLIST-TITLE':\r\n      return state.map(tl => tl.id === action.id ? {...tl, title: action.title} : tl)\r\n    case 'CHANGE-TODOLIST-FILTER':\r\n      return state.map(tl => tl.id === action.id ? {...tl, filter: action.filter} : tl)\r\n    case 'CHANGE-TODOLIST-ENTITY-STATUS':\r\n      return state.map(tl => tl.id === action.id ? {...tl, entityStatus: action.status} : tl)\r\n    case 'SET-TODOLISTS':\r\n      return action.todolists.map(tl => ({...tl, filter: 'all', entityStatus: 'idle'}))\r\n    default:\r\n      return state\r\n  }\r\n}\r\n\r\n// actions\r\nexport const removeTodolistAC = (id: string) => ({type: 'REMOVE-TODOLIST', id} as const)\r\nexport const addTodolistAC = (todolist: TodolistType) => ({type: 'ADD-TODOLIST', todolist} as const)\r\nexport const changeTodolistTitleAC = (id: string, title: string) => ({\r\n  type: 'CHANGE-TODOLIST-TITLE', id, title\r\n} as const)\r\nexport const changeTodolistFilterAC = (id: string, filter: FilterValuesType) => ({\r\n  type: 'CHANGE-TODOLIST-FILTER', id, filter\r\n} as const)\r\nexport const changeTodolistEntityStatusAC = (id: string, status: RequestStatusType) => ({\r\n  type: 'CHANGE-TODOLIST-ENTITY-STATUS', id, status\r\n} as const)\r\nexport const setTodolistsAC = (todolists: Array<TodolistType>) => ({type: 'SET-TODOLISTS', todolists} as const)\r\n\r\n// thunks\r\nexport const fetchTodolistsTC = () => async (dispatch: ThunkDispatch) => {\r\n  dispatch(setAppStatusAC('loading'))\r\n  const response = await todolistsAPI.getTodolists()\r\n  dispatch(setTodolistsAC(response.data))\r\n  dispatch(setAppStatusAC('succeeded'))\r\n}\r\n\r\nexport const removeTodolistTC = (todolistId: string) => async (dispatch: ThunkDispatch) => {\r\n  dispatch(setAppStatusAC('loading'))\r\n  dispatch(changeTodolistEntityStatusAC(todolistId, 'loading'))\r\n  await todolistsAPI.deleteTodolist(todolistId)\r\n  dispatch(removeTodolistAC(todolistId))\r\n  dispatch(setAppStatusAC('succeeded'))\r\n}\r\n\r\nexport const addTodolistTC = (title: string) => async (dispatch: ThunkDispatch) => {\r\n  dispatch(setAppStatusAC('loading'))\r\n  const response = await todolistsAPI.createTodolist(title)\r\n  dispatch(addTodolistAC(response.data.data.item))\r\n  dispatch(setAppStatusAC('succeeded'))\r\n}\r\n\r\nexport const changeTodolistTitleTC = (id: string, title: string) => async (dispatch: Dispatch<ActionsType>) => {\r\n  await todolistsAPI.updateTodolist(id, title)\r\n  dispatch(changeTodolistTitleAC(id, title))\r\n}\r\n\r\n// types\r\nexport type AddTodolistActionType = ReturnType<typeof addTodolistAC>;\r\nexport type RemoveTodolistActionType = ReturnType<typeof removeTodolistAC>;\r\nexport type SetTodolistsActionType = ReturnType<typeof setTodolistsAC>;\r\ntype ActionsType =\r\n  | RemoveTodolistActionType\r\n  | AddTodolistActionType\r\n  | ReturnType<typeof changeTodolistTitleAC>\r\n  | ReturnType<typeof changeTodolistFilterAC>\r\n  | SetTodolistsActionType\r\n  | ReturnType<typeof changeTodolistEntityStatusAC>\r\nexport type FilterValuesType = 'all' | 'active' | 'completed';\r\nexport type TodolistDomainType = TodolistType & {\r\n  filter: FilterValuesType\r\n  entityStatus: RequestStatusType\r\n}\r\ntype ThunkDispatch = Dispatch<ActionsType | SetAppStatusActionType>\r\n","import {AddTodolistActionType, RemoveTodolistActionType, SetTodolistsActionType} from './todolists-reducer'\r\nimport {TaskPriorities, TaskStatuses, TaskType, todolistsAPI, UpdateTaskModelType} from '../../api/todolists-api'\r\nimport {Dispatch} from 'redux'\r\nimport {AppRootStateType} from '../../app/store'\r\nimport {SetAppErrorActionType, setAppStatusAC, SetAppStatusActionType} from '../../app/app-reducer'\r\nimport {handleServerAppError, handleServerNetworkError} from '../../utils/error-utils'\r\nimport axios from \"axios\";\r\n\r\nconst initialState: TasksStateType = {}\r\n\r\nexport const tasksReducer = (state: TasksStateType = initialState, action: ActionsType): TasksStateType => {\r\n  switch (action.type) {\r\n    case 'REMOVE-TASK':\r\n      return {...state, [action.todolistId]: state[action.todolistId].filter(t => t.id !== action.taskId)}\r\n    case 'ADD-TASK':\r\n      return {...state, [action.task.todoListId]: [action.task, ...state[action.task.todoListId]]}\r\n    case 'UPDATE-TASK':\r\n      return {\r\n        ...state,\r\n        [action.todolistId]: state[action.todolistId]\r\n          .map(t => t.id === action.taskId ? {...t, ...action.model} : t)\r\n      }\r\n    case 'ADD-TODOLIST':\r\n      return {...state, [action.todolist.id]: []}\r\n    case 'REMOVE-TODOLIST':\r\n      const copyState = {...state}\r\n      delete copyState[action.id]\r\n      return copyState\r\n    case 'SET-TODOLISTS': {\r\n      const copyState = {...state}\r\n      action.todolists.forEach(tl => {\r\n        copyState[tl.id] = []\r\n      })\r\n      return copyState\r\n    }\r\n    case 'SET-TASKS':\r\n      return {...state, [action.todolistId]: action.tasks}\r\n    default:\r\n      return state\r\n  }\r\n}\r\n\r\n// actions\r\nexport const removeTaskAC = (taskId: string, todolistId: string) => ({type: 'REMOVE-TASK', taskId, todolistId} as const)\r\nexport const addTaskAC = (task: TaskType) => ({type: 'ADD-TASK', task} as const)\r\nexport const updateTaskAC = (taskId: string, model: UpdateDomainTaskModelType, todolistId: string) => ({\r\n  type: 'UPDATE-TASK', model, todolistId, taskId\r\n} as const)\r\nexport const setTasksAC = (tasks: Array<TaskType>, todolistId: string) => ({\r\n  type: 'SET-TASKS', tasks, todolistId\r\n} as const)\r\n\r\n// thunks\r\nexport const fetchTasksTC = (todolistId: string) => async (dispatch: Dispatch<ActionsType | SetAppStatusActionType>) => {\r\n  dispatch(setAppStatusAC('loading'))\r\n  const response = await todolistsAPI.getTasks(todolistId)\r\n  const tasks = response.data.items\r\n  dispatch(setTasksAC(tasks, todolistId))\r\n  dispatch(setAppStatusAC('succeeded'))\r\n}\r\n\r\nexport const removeTaskTC = (taskId: string, todolistId: string) => async (dispatch: Dispatch<ActionsType>) => {\r\n  await todolistsAPI.deleteTask(todolistId, taskId)\r\n  dispatch(removeTaskAC(taskId, todolistId))\r\n}\r\n\r\nexport const addTaskTC = (title: string, todolistId: string) => async (dispatch: Dispatch<ActionsType | SetAppErrorActionType | SetAppStatusActionType>) => {\r\n  dispatch(setAppStatusAC('loading'))\r\n  try {\r\n    const response = await todolistsAPI.createTask(todolistId, title)\r\n    if (response.data.resultCode === 0) {\r\n      const task = response.data.data.item\r\n      dispatch(addTaskAC(task))\r\n      dispatch(setAppStatusAC('succeeded'))\r\n    } else {\r\n      handleServerAppError(response.data, dispatch);\r\n    }\r\n  } catch (error) {\r\n    if (axios.isAxiosError(error)) handleServerNetworkError(error, dispatch)\r\n  }\r\n}\r\n\r\nexport const updateTaskTC = (taskId: string, domainModel: UpdateDomainTaskModelType, todolistId: string) =>\r\n  async (dispatch: ThunkDispatch, getState: () => AppRootStateType) => {\r\n    const state = getState()\r\n    const task = state.tasks[todolistId].find(t => t.id === taskId)\r\n    if (!task) {\r\n      //throw new Error(\"task not found in the state\");\r\n      console.warn('task not found in the state')\r\n      return\r\n    }\r\n\r\n    const apiModel: UpdateTaskModelType = {\r\n      deadline: task.deadline,\r\n      description: task.description,\r\n      priority: task.priority,\r\n      startDate: task.startDate,\r\n      title: task.title,\r\n      status: task.status,\r\n      ...domainModel\r\n    }\r\n\r\n    try {\r\n      const response = await todolistsAPI.updateTask(todolistId, taskId, apiModel)\r\n      if (response.data.resultCode === 0) {\r\n        const action = updateTaskAC(taskId, domainModel, todolistId)\r\n        dispatch(action)\r\n      } else {\r\n        handleServerAppError(response.data, dispatch);\r\n      }\r\n    } catch (error) {\r\n      if (axios.isAxiosError(error)) handleServerNetworkError(error, dispatch);\r\n    }\r\n  }\r\n\r\n// types\r\nexport type UpdateDomainTaskModelType = {\r\n  title?: string\r\n  description?: string\r\n  status?: TaskStatuses\r\n  priority?: TaskPriorities\r\n  startDate?: string\r\n  deadline?: string\r\n}\r\nexport type TasksStateType = {\r\n  [key: string]: Array<TaskType>\r\n}\r\ntype ActionsType =\r\n  | ReturnType<typeof removeTaskAC>\r\n  | ReturnType<typeof addTaskAC>\r\n  | ReturnType<typeof updateTaskAC>\r\n  | AddTodolistActionType\r\n  | RemoveTodolistActionType\r\n  | SetTodolistsActionType\r\n  | ReturnType<typeof setTasksAC>\r\ntype ThunkDispatch = Dispatch<ActionsType | SetAppStatusActionType | SetAppErrorActionType>\r\n","import React, {ChangeEvent, KeyboardEvent, useState} from 'react';\r\nimport TextField from '@mui/material/TextField';\r\nimport IconButton from '@mui/material/IconButton';\r\nimport {AddBox} from '@mui/icons-material';\r\n\r\ntype AddItemFormPropsType = {\r\n  addItem: (title: string) => void\r\n  disabled?: boolean\r\n}\r\n\r\nexport const AddItemForm = React.memo(function ({addItem, disabled = false}: AddItemFormPropsType) {\r\n  let [title, setTitle] = useState('')\r\n  let [error, setError] = useState<string | null>(null)\r\n\r\n  const addItemHandler = () => {\r\n    if (title.trim() !== '') {\r\n      addItem(title);\r\n      setTitle('');\r\n    } else {\r\n      setError('Title is required');\r\n    }\r\n  }\r\n\r\n  const onChangeHandler = (e: ChangeEvent<HTMLInputElement>) => {\r\n    setTitle(e.currentTarget.value)\r\n  }\r\n\r\n  const onKeyPressHandler = (e: KeyboardEvent<HTMLInputElement>) => {\r\n    if (error !== null) {\r\n      setError(null);\r\n    }\r\n    if (e.charCode === 13) {\r\n      addItemHandler();\r\n    }\r\n  }\r\n\r\n  return (\r\n    <div className={'add-item'}>\r\n      <TextField variant=\"outlined\"\r\n                 disabled={disabled}\r\n                 error={!!error}\r\n                 value={title}\r\n                 onChange={onChangeHandler}\r\n                 onKeyPress={onKeyPressHandler}\r\n                 label=\"Title\"\r\n                 helperText={error}\r\n      />\r\n      <IconButton color=\"success\" onClick={addItemHandler} disabled={disabled}>\r\n        <AddBox/>\r\n      </IconButton>\r\n    </div>\r\n  )\r\n})\r\n","import React, { ChangeEvent, useState } from 'react';\r\nimport TextField from '@mui/material/TextField';\r\n\r\ntype EditableSpanPropsType = {\r\n    value: string\r\n    onChange: (newValue: string) => void\r\n}\r\n\r\nexport const EditableSpan = React.memo(function ({value, onChange}: EditableSpanPropsType) {\r\n    console.log('EditableSpan called');\r\n    let [editMode, setEditMode] = useState(false);\r\n    let [title, setTitle] = useState(value);\r\n\r\n    const activateEditMode = () => {\r\n        setEditMode(true);\r\n        setTitle(value);\r\n    }\r\n    const activateViewMode = () => {\r\n        setEditMode(false);\r\n        onChange(title);\r\n    }\r\n    const changeTitle = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setTitle(e.currentTarget.value)\r\n    }\r\n\r\n    return editMode\r\n        ? <TextField classes={{root: 'editableInput'}} color={'success'} value={title} onChange={changeTitle} autoFocus onBlur={activateViewMode}/>\r\n        : <span className={'title'} onDoubleClick={activateEditMode}>{value}</span>\r\n});\r\n","import React, {ChangeEvent, useCallback} from 'react'\r\nimport {EditableSpan} from '../../../../components/EditableSpan/EditableSpan'\r\nimport DeleteForeverIcon from '@mui/icons-material/DeleteForever';\r\nimport IconButton from '@mui/material/IconButton';\r\nimport Checkbox from '@mui/material/Checkbox';\r\nimport {TaskStatuses, TaskType} from '../../../../api/todolists-api'\r\n\r\nexport const Task = React.memo((props: TaskPropsType) => {\r\n  const {task, todolistId, changeTaskStatus, changeTaskTitle, removeTask} = props\r\n\r\n  const onClickHandler = useCallback(() => removeTask(task.id, todolistId), [task.id, todolistId]);\r\n\r\n  const onChangeHandler = useCallback((e: ChangeEvent<HTMLInputElement>) => {\r\n    let newIsDoneValue = e.currentTarget.checked\r\n    changeTaskStatus(task.id, newIsDoneValue ? TaskStatuses.Completed : TaskStatuses.New, todolistId)\r\n  }, [task.id, todolistId]);\r\n\r\n  const onTitleChangeHandler = useCallback((newValue: string) => {\r\n    changeTaskTitle(task.id, newValue, todolistId)\r\n  }, [task.id, todolistId]);\r\n\r\n  return (\r\n    <div key={task.id} className={[task.status === TaskStatuses.Completed ? 'is-done' : '', 'task'].join(' ')}>\r\n      <Checkbox\r\n        checked={task.status === TaskStatuses.Completed}\r\n        color=\"success\"\r\n        onChange={onChangeHandler}\r\n      />\r\n\r\n      <EditableSpan value={task.title} onChange={onTitleChangeHandler}/>\r\n      <IconButton onClick={onClickHandler}>\r\n        <DeleteForeverIcon/>\r\n      </IconButton>\r\n    </div>\r\n  )\r\n})\r\n\r\ntype TaskPropsType = {\r\n  task: TaskType\r\n  todolistId: string\r\n  changeTaskStatus: (id: string, status: TaskStatuses, todolistId: string) => void\r\n  changeTaskTitle: (taskId: string, newTitle: string, todolistId: string) => void\r\n  removeTask: (taskId: string, todolistId: string) => void\r\n}","import React, {useCallback, useEffect} from 'react'\r\nimport {AddItemForm} from '../../../components/AddItemForm/AddItemForm'\r\nimport {EditableSpan} from '../../../components/EditableSpan/EditableSpan'\r\nimport IconButton from '@mui/material/IconButton';\r\nimport Button from '@mui/material/Button';\r\nimport {Delete} from '@mui/icons-material';\r\nimport {Task} from './Task/Task'\r\nimport {TaskStatuses, TaskType} from '../../../api/todolists-api'\r\nimport {FilterValuesType, TodolistDomainType} from '../todolists-reducer'\r\nimport {useDispatch} from 'react-redux'\r\nimport {fetchTasksTC} from '../tasks-reducer'\r\n\r\nexport const Todolist = React.memo(function ({demo = false, ...props}: PropsType) {\r\n\r\n  const {todolist, tasks, changeFilter, changeTaskStatus, changeTaskTitle, removeTask} = props\r\n  const dispatch = useDispatch()\r\n\r\n  useEffect(() => {\r\n    if (demo) {\r\n      return\r\n    }\r\n    dispatch(fetchTasksTC(todolist.id))\r\n  }, [])\r\n\r\n  const addTask = useCallback((title: string) => {\r\n    props.addTask(title, todolist.id)\r\n  }, [props.addTask, todolist.id])\r\n\r\n  const removeTodolist = () => {\r\n    props.removeTodolist(todolist.id)\r\n  }\r\n  const changeTodolistTitle = useCallback((title: string) => {\r\n    props.changeTodolistTitle(todolist.id, title)\r\n  }, [todolist.id, props.changeTodolistTitle])\r\n\r\n  const onAllClickHandler = useCallback(() => changeFilter('all', todolist.id), [todolist.id, changeFilter])\r\n  const onActiveClickHandler = useCallback(() => changeFilter('active', todolist.id), [todolist.id, changeFilter])\r\n  const onCompletedClickHandler = useCallback(() => changeFilter('completed', todolist.id), [todolist.id, changeFilter])\r\n\r\n  let tasksForTodolist = tasks\r\n\r\n  if (todolist.filter === 'active') {\r\n    tasksForTodolist = tasks.filter(t => t.status === TaskStatuses.New)\r\n  }\r\n  if (todolist.filter === 'completed') {\r\n    tasksForTodolist = tasks.filter(t => t.status === TaskStatuses.Completed)\r\n  }\r\n\r\n  return (\r\n    <div>\r\n      <h3 className={'todolist-title'}><EditableSpan value={todolist.title} onChange={changeTodolistTitle}/>\r\n        <IconButton onClick={removeTodolist} disabled={todolist.entityStatus === 'loading'}>\r\n          <Delete/>\r\n        </IconButton>\r\n      </h3>\r\n      <AddItemForm addItem={addTask} disabled={todolist.entityStatus === 'loading'}/>\r\n      <div>\r\n        {\r\n          tasksForTodolist.map(t => <Task key={t.id} task={t} todolistId={todolist.id}\r\n                                          removeTask={removeTask}\r\n                                          changeTaskTitle={changeTaskTitle}\r\n                                          changeTaskStatus={changeTaskStatus}\r\n          />)\r\n        }\r\n      </div>\r\n      <div style={{paddingTop: '10px'}}>\r\n        <Button variant={todolist.filter === 'all' ? 'outlined' : 'text'}\r\n                onClick={onAllClickHandler}\r\n                classes={{root: 'buttonFilter', text: 'buttonFilterText'}}\r\n        >\r\n          All\r\n        </Button>\r\n        <Button variant={todolist.filter === 'active' ? 'outlined' : 'text'}\r\n                onClick={onActiveClickHandler}\r\n                classes={{root: 'buttonFilter', text: 'buttonFilterText'}}\r\n        >\r\n          Active\r\n        </Button>\r\n        <Button variant={todolist.filter === 'completed' ? 'outlined' : 'text'}\r\n                onClick={onCompletedClickHandler}\r\n                classes={{root: 'buttonFilter', text: 'buttonFilterText'}}\r\n        >\r\n          Completed\r\n        </Button>\r\n      </div>\r\n    </div>\r\n  )\r\n})\r\n\r\ntype PropsType = {\r\n  todolist: TodolistDomainType\r\n  tasks: Array<TaskType>\r\n  changeFilter: (value: FilterValuesType, todolistId: string) => void\r\n  addTask: (title: string, todolistId: string) => void\r\n  changeTaskStatus: (id: string, status: TaskStatuses, todolistId: string) => void\r\n  changeTaskTitle: (taskId: string, newTitle: string, todolistId: string) => void\r\n  removeTask: (taskId: string, todolistId: string) => void\r\n  removeTodolist: (id: string) => void\r\n  changeTodolistTitle: (id: string, newTitle: string) => void\r\n  demo?: boolean\r\n}\r\n","import React, {useCallback, useEffect} from 'react'\r\nimport {useDispatch, useSelector} from 'react-redux'\r\nimport {AppRootStateType} from '../../app/store'\r\nimport {\r\n  addTodolistTC,\r\n  changeTodolistFilterAC,\r\n  changeTodolistTitleTC,\r\n  fetchTodolistsTC,\r\n  FilterValuesType,\r\n  removeTodolistTC,\r\n  TodolistDomainType\r\n} from './todolists-reducer'\r\nimport {addTaskTC, removeTaskTC, TasksStateType, updateTaskTC} from './tasks-reducer'\r\nimport {TaskStatuses} from '../../api/todolists-api'\r\nimport Grid from '@mui/material/Grid';\r\nimport Paper from '@mui/material/Paper';\r\nimport {AddItemForm} from '../../components/AddItemForm/AddItemForm'\r\nimport {Todolist} from './Todolist/Todolist'\r\nimport {useNavigate} from \"react-router-dom\";\r\n\r\nexport const TodolistsList: React.FC<PropsType> = ({demo = false}) => {\r\n  const todolists = useSelector<AppRootStateType, Array<TodolistDomainType>>(state => state.todolists)\r\n  const tasks = useSelector<AppRootStateType, TasksStateType>(state => state.tasks)\r\n  const isLoggedIn = useSelector<AppRootStateType, boolean>(state => state.auth.isLoggedIn)\r\n\r\n  const dispatch = useDispatch()\r\n\r\n  useEffect(() => {\r\n    if (demo || !isLoggedIn) {\r\n      return;\r\n    }\r\n    const thunk = fetchTodolistsTC()\r\n    dispatch(thunk)\r\n  }, [])\r\n\r\n  const removeTask = useCallback(function (id: string, todolistId: string) {\r\n    const thunk = removeTaskTC(id, todolistId)\r\n    dispatch(thunk)\r\n  }, [])\r\n\r\n  const addTask = useCallback(function (title: string, todolistId: string) {\r\n    const thunk = addTaskTC(title, todolistId)\r\n    dispatch(thunk)\r\n  }, [])\r\n\r\n  const changeStatus = useCallback(function (id: string, status: TaskStatuses, todolistId: string) {\r\n    const thunk = updateTaskTC(id, {status}, todolistId)\r\n    dispatch(thunk)\r\n  }, [])\r\n\r\n  const changeTaskTitle = useCallback(function (id: string, newTitle: string, todolistId: string) {\r\n    const thunk = updateTaskTC(id, {title: newTitle}, todolistId)\r\n    dispatch(thunk)\r\n  }, [])\r\n\r\n  const changeFilter = useCallback(function (value: FilterValuesType, todolistId: string) {\r\n    const action = changeTodolistFilterAC(todolistId, value)\r\n    dispatch(action)\r\n  }, [])\r\n\r\n  const removeTodolist = useCallback(function (id: string) {\r\n    const thunk = removeTodolistTC(id)\r\n    dispatch(thunk)\r\n  }, [])\r\n\r\n  const changeTodolistTitle = useCallback(function (id: string, title: string) {\r\n    const thunk = changeTodolistTitleTC(id, title)\r\n    dispatch(thunk)\r\n  }, [])\r\n\r\n  const addTodolist = useCallback((title: string) => {\r\n    const thunk = addTodolistTC(title)\r\n    dispatch(thunk)\r\n  }, [dispatch])\r\n\r\n  const n = useNavigate()\r\n  if (!isLoggedIn) n('/login')\r\n\r\n  return <>\r\n    <Grid container style={{padding: '20px'}}>\r\n      <AddItemForm addItem={addTodolist}/>\r\n    </Grid>\r\n    <Grid container spacing={3}>\r\n      {\r\n        todolists.map(tl => {\r\n          let allTodolistTasks = tasks[tl.id]\r\n\r\n          return <Grid item key={tl.id}>\r\n            <Paper style={{padding: '10px'}}>\r\n              <Todolist\r\n                todolist={tl}\r\n                tasks={allTodolistTasks}\r\n                removeTask={removeTask}\r\n                changeFilter={changeFilter}\r\n                addTask={addTask}\r\n                changeTaskStatus={changeStatus}\r\n                removeTodolist={removeTodolist}\r\n                changeTaskTitle={changeTaskTitle}\r\n                changeTodolistTitle={changeTodolistTitle}\r\n                demo={demo}\r\n              />\r\n            </Paper>\r\n          </Grid>\r\n        })\r\n      }\r\n    </Grid>\r\n  </>\r\n}\r\n\r\ntype PropsType = {\r\n  demo?: boolean\r\n}","import React from 'react';\r\nimport Snackbar from '@mui/material/Snackbar';\r\nimport MuiAlert, { AlertProps } from '@mui/material/Alert';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { AppRootStateType } from '../../app/store';\r\nimport { setAppErrorAC } from '../../app/app-reducer';\r\n\r\nconst Alert = React.forwardRef<HTMLDivElement, AlertProps>(function Alert(\r\n    props, ref) {\r\n    return <MuiAlert elevation={6} ref={ref} variant=\"filled\" {...props} />;\r\n});\r\n\r\n\r\nexport function ErrorSnackbar() {\r\n\r\n    const error = useSelector<AppRootStateType, string | null>(state => state.app.error)\r\n\r\n    const dispatch = useDispatch();\r\n\r\n    const handleClose = (event?: React.SyntheticEvent, reason?: string) => {\r\n        if (reason === 'clickaway') {\r\n            return;\r\n        }\r\n        dispatch(setAppErrorAC(null))\r\n    };\r\n\r\n    return (\r\n        <Snackbar open={error !== null} autoHideDuration={6000} onClose={handleClose}>\r\n            <Alert onClose={handleClose} severity=\"error\" sx={{width: '100%'}}>\r\n                {error}\r\n            </Alert>\r\n        </Snackbar>\r\n    );\r\n}\r\n","import React from 'react'\nimport Grid from '@mui/material/Grid';\nimport Checkbox from '@mui/material/Checkbox';\nimport FormControl from '@mui/material/FormControl';\nimport FormControlLabel from '@mui/material/FormControlLabel';\nimport FormGroup from '@mui/material/FormGroup';\nimport FormLabel from '@mui/material/FormLabel';\nimport TextField from '@mui/material/TextField';\nimport Button from '@mui/material/Button';\nimport {useFormik} from \"formik\";\nimport {useDispatch, useSelector} from \"react-redux\";\nimport {loginTC} from \"./auth-reducer\";\nimport {AppRootStateType} from \"../../app/store\";\nimport {useNavigate} from \"react-router-dom\";\n\nexport type LoginParamsType = {\n  email: string\n  password: string\n}\n\nexport const Login = () => {\n  type FormikErrorType = {\n    email?: string\n    password?: string\n    rememberMe?: boolean\n  }\n\n  const dispatch = useDispatch()\n\n  const formik = useFormik({\n    initialValues: {\n      email: '',\n      password: '',\n      rememberMe: false\n    },\n    validate: (values) => {\n      const errors: FormikErrorType = {};\n      if (!values.email) {\n        errors.email = 'Required';\n      } else if (!/^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,4}$/i.test(values.email)) {\n        errors.email = 'Invalid email address';\n      }\n      if (!values.password) {\n        errors.password = 'Required';\n      } else if (values.password.length < 3) {\n        errors.password = 'Password should content more than 2 symbols';\n      }\n      return errors;\n    },\n    onSubmit: values => {\n      dispatch(loginTC(values))\n      formik.resetForm()\n    },\n  })\n\n  const isLoggedIn = useSelector((state: AppRootStateType) => state.auth.isLoggedIn)\n  const navigate = useNavigate()\n\n  if(isLoggedIn) navigate('/')\n\n  return <Grid container justifyContent={'center'}>\n    <Grid item justifyContent={'center'}>\n      <form onSubmit={formik.handleSubmit}>\n        <FormControl>\n          <FormLabel>\n            <p>To log in get registered\n              <a href={'https://social-network.samuraijs.com/'}\n                 target={'_blank'}> here\n              </a>\n            </p>\n            <p>or use common test account credentials:</p>\n            <p>Email: free@samuraijs.com</p>\n            <p>Password: free</p>\n          </FormLabel>\n          <FormGroup>\n            <TextField\n              label=\"Email\"\n              margin=\"normal\"\n              {...formik.getFieldProps('email')}\n              error={!!formik.errors.email && formik.touched.email}\n              helperText={formik.touched.email ? formik.errors.email : ''}\n            />\n            <TextField\n              label=\"Password\"\n              margin=\"normal\"\n              {...formik.getFieldProps('password')}\n              error={!!formik.errors.password && formik.touched.password}\n              helperText={formik.touched.password ? formik.errors.password : ''}\n            />\n            <FormControlLabel\n              label={'Remember me'}\n              control={\n                <Checkbox\n                  name={\"rememberMe\"}\n                  onChange={formik.handleChange}\n                  checked={formik.values.rememberMe}\n                />\n              }\n            />\n            <Button type={'submit'} variant={'contained'} color={'primary'}>\n              Login\n            </Button>\n          </FormGroup>\n        </FormControl>\n      </form>\n    </Grid>\n  </Grid>\n}\n","import React, {useEffect} from 'react'\r\nimport './App.css'\r\nimport {TodolistsList} from '../features/TodolistsList/TodolistsList'\r\nimport {useDispatch, useSelector} from 'react-redux'\r\nimport {AppRootStateType} from './store'\r\nimport {initializeAppTC, RequestStatusType} from './app-reducer'\r\nimport AppBar from '@mui/material/AppBar';\r\nimport Toolbar from '@mui/material/Toolbar';\r\nimport IconButton from '@mui/material/IconButton';\r\nimport Typography from '@mui/material/Typography';\r\nimport Button from '@mui/material/Button';\r\nimport Container from '@mui/material/Container';\r\nimport LinearProgress from '@mui/material/LinearProgress';\r\nimport PlaylistAddCheckIcon from '@mui/icons-material/PlaylistAddCheck';\r\nimport {ErrorSnackbar} from '../components/ErrorSnackbar/ErrorSnackbar'\r\nimport {Login} from \"../features/Login/Login\";\r\nimport {Routes, Route} from \"react-router-dom\";\r\nimport {CircularProgress} from \"@mui/material\";\r\nimport {logoutTC} from \"../features/Login/auth-reducer\";\r\n\r\ntype PropsType = {\r\n  demo?: boolean\r\n}\r\n\r\nfunction App({demo = false}: PropsType) {\r\n  const status = useSelector<AppRootStateType, RequestStatusType>((state) => state.app.status)\r\n  const isInitialized = useSelector<AppRootStateType, boolean>((state) => state.app.isInitialized)\r\n  const isLoggedIn = useSelector<AppRootStateType, boolean>((state) => state.auth.isLoggedIn)\r\n\r\n  const dispatch = useDispatch()\r\n\r\n  useEffect(() => {\r\n    dispatch(initializeAppTC())\r\n  }, [dispatch])\r\n\r\n  if (!isInitialized) {\r\n    return <div\r\n      style={{position: 'fixed', top: '30%', textAlign: 'center', width: '100%'}}>\r\n      <CircularProgress/>\r\n    </div>\r\n  }\r\n\r\n  const onLogOut = () => {\r\n    dispatch(logoutTC())\r\n  }\r\n\r\n  return (\r\n    <div className=\"App\">\r\n      <ErrorSnackbar/>\r\n      <AppBar position=\"static\">\r\n        <Toolbar>\r\n          <IconButton edge=\"start\" color=\"inherit\" aria-label=\"todolist\">\r\n            <PlaylistAddCheckIcon/>\r\n          </IconButton>\r\n          <Typography variant=\"h6\">\r\n            Your Todo lists\r\n          </Typography>\r\n          {isLoggedIn && <Button onClick={onLogOut} color={\"inherit\"}>Log out</Button>}\r\n        </Toolbar>\r\n        {status === 'loading' && <LinearProgress color={'success'}/>}\r\n      </AppBar>\r\n      <Container fixed>\r\n        <Routes>\r\n          <Route path={'/'} element={<TodolistsList demo={demo}/>}/>\r\n          <Route path={'/login'} element={<Login/>}/>\r\n          <Route path={'/*'} element={<div>404</div>}/>\r\n        </Routes>\r\n      </Container>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default App\r\n","import { tasksReducer } from '../features/TodolistsList/tasks-reducer';\r\nimport { todolistsReducer } from '../features/TodolistsList/todolists-reducer';\r\nimport { applyMiddleware, combineReducers, createStore } from 'redux'\r\nimport thunkMiddleware from 'redux-thunk'\r\nimport { appReducer } from './app-reducer'\r\nimport {authReducer} from \"../features/Login/auth-reducer\";\r\n\r\nconst rootReducer = combineReducers({\r\n    tasks: tasksReducer,\r\n    todolists: todolistsReducer,\r\n    app: appReducer,\r\n    auth: authReducer,\r\n})\r\nexport const store = createStore(rootReducer, applyMiddleware(thunkMiddleware));\r\nexport type AppRootStateType = ReturnType<typeof rootReducer>\r\n\r\n// @ts-ignore\r\nwindow.store = store;\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport reportWebVitals from './reportWebVitals';\nimport App from './app/App';\nimport {Provider} from 'react-redux';\nimport {store} from './app/store';\nimport {HashRouter} from \"react-router-dom\";\n\nReactDOM.render(\n    <React.StrictMode>\n      <HashRouter>\n        <Provider store={store}>\n            <App/>\n        </Provider>\n        </HashRouter>\n    </React.StrictMode>,\n    document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}